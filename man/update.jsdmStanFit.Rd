% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update.R
\name{update.jsdmStanFit}
\alias{update.jsdmStanFit}
\title{Update a jsdmStanFit model object with new data or Stan arguments}
\usage{
\method{update}{jsdmStanFit}(
  object,
  newY = NULL,
  newX = NULL,
  newD = NULL,
  newNtrials = NULL,
  newZi_X = NULL,
  save_data = TRUE,
  ...
)
}
\arguments{
\item{object}{The jsdmStanFit model object}

\item{newY}{New Y data, by default \code{NULL}}

\item{newX}{New X data, by default \code{NULL}}

\item{newD}{New number of latent variables, by default \code{NULL}}

\item{newNtrials}{New number of trials (binomial model only), by default
\code{NULL}}

\item{newZi_X}{New predictor data for the zi parameter in zero-inflated models,
by default \code{NULL}. In cases where the model was originally fit with the
same X and zi_X data and only newX is supplied to update.jsdmStanFit the zi_X
data will also be set to newX.}

\item{save_data}{Whether to save the data in the jsdmStanFit object, by default
\code{TRUE}}

\item{...}{Arguments passed to \code{\link[rstan:stanmodel-method-sampling]{rstan::sampling()}}}
}
\value{
An object of class \code{jsdmStanFit}
}
\description{
This function allows you to update a jsdmStanFit model with new data or new
arguments to Stan. It does not support changes that require recompiling stancode -
for that you should use \code{\link[=stan_jsdm]{stan_jsdm()}}. Changes to the number of sites, species or
covariates do not require recompiling stancode and can therefore be done using this
function.
}
\examples{
\dontrun{
# MGLMM - specified by using the mglmm aliases and with direct reference to Y and
# X matrices:
mglmm_data <- mglmm_sim_data(
  N = 100, S = 10, K = 3,
  family = "gaussian"
)
mglmm_fit <- stan_mglmm(
  Y = mglmm_data$Y, X = mglmm_data$X,
  family = "gaussian"
)
mglmm_fit2 <- update(mglmm_fit, iter = 4000)

# You can also run a model by supplying the data as a list:
gllvm_data <- jsdm_sim_data(
  method = "gllvm", N = 100, S = 6, D = 2,
  family = "bernoulli"
)
gllvm_fit <- stan_jsdm(
  dat_list = gllvm_data, method = "gllvm",
  family = "bernoulli"
)
gllvm_fit
gllvm_data <- jsdm_sim_data(
  method = "gllvm", N = 500, S = 4, D = 2,
  family = "bernoulli"
)
gllvm_fit2 <- update(gllvm_fit, newY = gllvm_data$Y)
gllvm_fit2
}
}
