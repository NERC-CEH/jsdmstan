// Generated by rstantools.  Do not edit by hand.

/*
    jsdmstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    jsdmstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with jsdmstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_mglmm_poisson_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mglmm_poisson");
    reader.add_event(1, 1, "include", "/include/tri_functions.stan");
    reader.add_event(1, 0, "start", "/include/tri_functions.stan");
    reader.add_event(36, 35, "end", "/include/tri_functions.stan");
    reader.add_event(36, 2, "restart", "model_mglmm_poisson");
    reader.add_event(46, 12, "include", "/mglmm/transformed_data.stan");
    reader.add_event(46, 0, "start", "/mglmm/transformed_data.stan");
    reader.add_event(51, 5, "end", "/mglmm/transformed_data.stan");
    reader.add_event(51, 13, "restart", "model_mglmm_poisson");
    reader.add_event(53, 15, "include", "/mglmm/pars.stan");
    reader.add_event(53, 0, "start", "/mglmm/pars.stan");
    reader.add_event(70, 17, "end", "/mglmm/pars.stan");
    reader.add_event(70, 16, "restart", "model_mglmm_poisson");
    reader.add_event(72, 18, "include", "/mglmm/transformed_pars.stan");
    reader.add_event(72, 0, "start", "/mglmm/transformed_pars.stan");
    reader.add_event(88, 16, "end", "/mglmm/transformed_pars.stan");
    reader.add_event(88, 19, "restart", "model_mglmm_poisson");
    reader.add_event(95, 26, "include", "/mglmm/model_priors.stan");
    reader.add_event(95, 0, "start", "/mglmm/model_priors.stan");
    reader.add_event(109, 14, "end", "/mglmm/model_priors.stan");
    reader.add_event(109, 27, "restart", "model_mglmm_poisson");
    reader.add_event(129, 45, "end", "model_mglmm_poisson");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
to_lower_tri(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                 const int& nr,
                 const int& nc, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        validate_non_negative_index("y", "nr", nr);
        validate_non_negative_index("y", "nc", nc);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> y(nr, nc);
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        current_statement_begin__ = 5;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning
        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);
        current_statement_begin__ = 6;
        for (int i = 1; i <= nr; ++i) {
            current_statement_begin__ = 7;
            for (int j = 1; j <= nc; ++j) {
                current_statement_begin__ = 8;
                if (as_bool(logical_lt(i, j))) {
                    current_statement_begin__ = 9;
                    stan::model::assign(y, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable y");
                } else {
                    current_statement_begin__ = 11;
                    stan::model::assign(y, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(x, pos, "x", 1), 
                                "assigning variable y");
                    current_statement_begin__ = 12;
                    stan::math::assign(pos, (pos + 1));
                }
            }
        }
        current_statement_begin__ = 16;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct to_lower_tri_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                 const int& nr,
                 const int& nc, std::ostream* pstream__) const {
        return to_lower_tri(x, nr, nc, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
lt_to_vector(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 20;
        int nr(0);
        (void) nr;  // dummy to suppress unused var warning
        stan::math::fill(nr, std::numeric_limits<int>::min());
        stan::math::assign(nr,rows(y));
        current_statement_begin__ = 21;
        int nc(0);
        (void) nc;  // dummy to suppress unused var warning
        stan::math::fill(nc, std::numeric_limits<int>::min());
        stan::math::assign(nc,cols(y));
        current_statement_begin__ = 22;
        validate_non_negative_index("x", "((nc * (nr - nc)) + divide((std::min(rows(y), cols(y)) * (std::min(rows(y), cols(y)) + 1)), 2))", ((nc * (nr - nc)) + divide((std::min(rows(y), cols(y)) * (std::min(rows(y), cols(y)) + 1)), 2)));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x(((nc * (nr - nc)) + divide((std::min(rows(y), cols(y)) * (std::min(rows(y), cols(y)) + 1)), 2)));
        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x, DUMMY_VAR__);
        current_statement_begin__ = 23;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning
        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);
        current_statement_begin__ = 25;
        for (int i = 1; i <= nr; ++i) {
            current_statement_begin__ = 26;
            for (int j = 1; j <= nc; ++j) {
                current_statement_begin__ = 27;
                if (as_bool(logical_lt(i, j))) {
                    current_statement_begin__ = 27;
                    continue;
                }
                current_statement_begin__ = 29;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(pos), stan::model::nil_index_list()), 
                            get_base1(y, i, j, "y", 1), 
                            "assigning variable x");
                current_statement_begin__ = 30;
                stan::math::assign(pos, (pos + 1));
            }
        }
        current_statement_begin__ = 34;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct lt_to_vector_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& y, std::ostream* pstream__) const {
        return lt_to_vector(y, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_mglmm_poisson
  : public stan::model::model_base_crtp<model_mglmm_poisson> {
private:
        int N;
        int S;
        int K;
        matrix_d X;
        std::vector<std::vector<int> > Y;
        int S_lower;
        int K_lower;
public:
    model_mglmm_poisson(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_mglmm_poisson(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_mglmm_poisson_namespace::model_mglmm_poisson";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            check_greater_or_equal(function__, "S", S, 1);
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 42;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 44;
            validate_non_negative_index("Y", "N", N);
            validate_non_negative_index("Y", "S", S);
            context__.validate_dims("data initialization", "Y", "int", context__.to_vec(N,S));
            Y = std::vector<std::vector<int> >(N, std::vector<int>(S, int(0)));
            vals_i__ = context__.vals_i("Y");
            pos__ = 0;
            size_t Y_k_0_max__ = N;
            size_t Y_k_1_max__ = S;
            for (size_t k_1__ = 0; k_1__ < Y_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                    Y[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t Y_i_0_max__ = N;
            size_t Y_i_1_max__ = S;
            for (size_t i_0__ = 0; i_0__ < Y_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < Y_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "Y[i_0__][i_1__]", Y[i_0__][i_1__], 0);
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 48;
            S_lower = int(0);
            stan::math::fill(S_lower, std::numeric_limits<int>::min());
            current_statement_begin__ = 49;
            K_lower = int(0);
            stan::math::fill(K_lower, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 50;
            stan::math::assign(S_lower, divide((S * (S + 1)), 2));
            current_statement_begin__ = 51;
            stan::math::assign(K_lower, divide((K * (K + 1)), 2));
            // validate transformed data
            current_statement_begin__ = 48;
            check_greater_or_equal(function__, "S_lower", S_lower, 1);
            current_statement_begin__ = 49;
            check_greater_or_equal(function__, "K_lower", K_lower, 1);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 55;
            num_params_r__ += 1;
            current_statement_begin__ = 56;
            num_params_r__ += 1;
            current_statement_begin__ = 57;
            validate_non_negative_index("a", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 62;
            validate_non_negative_index("sigmas_b", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 63;
            validate_non_negative_index("z_preds", "K", K);
            validate_non_negative_index("z_preds", "S", S);
            num_params_r__ += (K * S);
            current_statement_begin__ = 65;
            validate_non_negative_index("L_Rho_preds", "K", K);
            validate_non_negative_index("L_Rho_preds", "K", K);
            num_params_r__ += ((K * (K - 1)) / 2);
            current_statement_begin__ = 68;
            validate_non_negative_index("sigmas_u", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 69;
            validate_non_negative_index("z_species", "S", S);
            validate_non_negative_index("z_species", "N", N);
            num_params_r__ += (S * N);
            current_statement_begin__ = 70;
            validate_non_negative_index("L_Rho_species", "S", S);
            validate_non_negative_index("L_Rho_species", "S", S);
            num_params_r__ += ((S * (S - 1)) / 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_mglmm_poisson() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 55;
        if (!(context__.contains_r("a_bar")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a_bar missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a_bar");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a_bar", "double", context__.to_vec());
        double a_bar(0);
        a_bar = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(a_bar);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a_bar: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("sigma_a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_a");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_a", "double", context__.to_vec());
        double sigma_a(0);
        sigma_a = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a");
        pos__ = 0U;
        validate_non_negative_index("a", "N", N);
        context__.validate_dims("parameter initialization", "a", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> a(N);
        size_t a_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            a(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 62;
        if (!(context__.contains_r("sigmas_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmas_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmas_b");
        pos__ = 0U;
        validate_non_negative_index("sigmas_b", "K", K);
        context__.validate_dims("parameter initialization", "sigmas_b", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigmas_b(K);
        size_t sigmas_b_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigmas_b_j_1_max__; ++j_1__) {
            sigmas_b(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigmas_b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmas_b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 63;
        if (!(context__.contains_r("z_preds")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_preds missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_preds");
        pos__ = 0U;
        validate_non_negative_index("z_preds", "K", K);
        validate_non_negative_index("z_preds", "S", S);
        context__.validate_dims("parameter initialization", "z_preds", "matrix_d", context__.to_vec(K,S));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_preds(K, S);
        size_t z_preds_j_2_max__ = S;
        size_t z_preds_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < z_preds_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_preds_j_1_max__; ++j_1__) {
                z_preds(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(z_preds);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_preds: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 65;
        if (!(context__.contains_r("L_Rho_preds")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_Rho_preds missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_Rho_preds");
        pos__ = 0U;
        validate_non_negative_index("L_Rho_preds", "K", K);
        validate_non_negative_index("L_Rho_preds", "K", K);
        context__.validate_dims("parameter initialization", "L_Rho_preds", "matrix_d", context__.to_vec(K,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Rho_preds(K, K);
        size_t L_Rho_preds_j_2_max__ = K;
        size_t L_Rho_preds_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_Rho_preds_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Rho_preds_j_1_max__; ++j_1__) {
                L_Rho_preds(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_Rho_preds);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_Rho_preds: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 68;
        if (!(context__.contains_r("sigmas_u")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmas_u missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmas_u");
        pos__ = 0U;
        validate_non_negative_index("sigmas_u", "S", S);
        context__.validate_dims("parameter initialization", "sigmas_u", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigmas_u(S);
        size_t sigmas_u_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < sigmas_u_j_1_max__; ++j_1__) {
            sigmas_u(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigmas_u);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmas_u: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 69;
        if (!(context__.contains_r("z_species")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_species missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_species");
        pos__ = 0U;
        validate_non_negative_index("z_species", "S", S);
        validate_non_negative_index("z_species", "N", N);
        context__.validate_dims("parameter initialization", "z_species", "matrix_d", context__.to_vec(S,N));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_species(S, N);
        size_t z_species_j_2_max__ = N;
        size_t z_species_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < z_species_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_species_j_1_max__; ++j_1__) {
                z_species(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(z_species);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_species: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 70;
        if (!(context__.contains_r("L_Rho_species")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_Rho_species missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_Rho_species");
        pos__ = 0U;
        validate_non_negative_index("L_Rho_species", "S", S);
        validate_non_negative_index("L_Rho_species", "S", S);
        context__.validate_dims("parameter initialization", "L_Rho_species", "matrix_d", context__.to_vec(S,S));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Rho_species(S, S);
        size_t L_Rho_species_j_2_max__ = S;
        size_t L_Rho_species_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < L_Rho_species_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Rho_species_j_1_max__; ++j_1__) {
                L_Rho_species(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_Rho_species);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_Rho_species: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 55;
            local_scalar_t__ a_bar;
            (void) a_bar;  // dummy to suppress unused var warning
            if (jacobian__)
                a_bar = in__.scalar_constrain(lp__);
            else
                a_bar = in__.scalar_constrain();
            current_statement_begin__ = 56;
            local_scalar_t__ sigma_a;
            (void) sigma_a;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_a = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_a = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 57;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a;
            (void) a;  // dummy to suppress unused var warning
            if (jacobian__)
                a = in__.vector_constrain(N, lp__);
            else
                a = in__.vector_constrain(N);
            current_statement_begin__ = 62;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigmas_b;
            (void) sigmas_b;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmas_b = in__.vector_lb_constrain(0, K, lp__);
            else
                sigmas_b = in__.vector_lb_constrain(0, K);
            current_statement_begin__ = 63;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> z_preds;
            (void) z_preds;  // dummy to suppress unused var warning
            if (jacobian__)
                z_preds = in__.matrix_constrain(K, S, lp__);
            else
                z_preds = in__.matrix_constrain(K, S);
            current_statement_begin__ = 65;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Rho_preds;
            (void) L_Rho_preds;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Rho_preds = in__.cholesky_factor_corr_constrain(K, lp__);
            else
                L_Rho_preds = in__.cholesky_factor_corr_constrain(K);
            current_statement_begin__ = 68;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigmas_u;
            (void) sigmas_u;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmas_u = in__.vector_lb_constrain(0, S, lp__);
            else
                sigmas_u = in__.vector_lb_constrain(0, S);
            current_statement_begin__ = 69;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> z_species;
            (void) z_species;  // dummy to suppress unused var warning
            if (jacobian__)
                z_species = in__.matrix_constrain(S, N, lp__);
            else
                z_species = in__.matrix_constrain(S, N);
            current_statement_begin__ = 70;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Rho_species;
            (void) L_Rho_species;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Rho_species = in__.cholesky_factor_corr_constrain(S, lp__);
            else
                L_Rho_species = in__.cholesky_factor_corr_constrain(S);
            // transformed parameters
            current_statement_begin__ = 74;
            validate_non_negative_index("betas", "K", K);
            validate_non_negative_index("betas", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> betas(K, S);
            stan::math::initialize(betas, DUMMY_VAR__);
            stan::math::fill(betas, DUMMY_VAR__);
            current_statement_begin__ = 75;
            validate_non_negative_index("L_Rho_preds_vector", "K_lower", K_lower);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_Rho_preds_vector(K_lower);
            stan::math::initialize(L_Rho_preds_vector, DUMMY_VAR__);
            stan::math::fill(L_Rho_preds_vector, DUMMY_VAR__);
            current_statement_begin__ = 76;
            validate_non_negative_index("u", "N", N);
            validate_non_negative_index("u", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> u(N, S);
            stan::math::initialize(u, DUMMY_VAR__);
            stan::math::fill(u, DUMMY_VAR__);
            current_statement_begin__ = 77;
            validate_non_negative_index("L_Rho_spec_vector", "S_lower", S_lower);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_Rho_spec_vector(S_lower);
            stan::math::initialize(L_Rho_spec_vector, DUMMY_VAR__);
            stan::math::fill(L_Rho_spec_vector, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 80;
            stan::math::assign(betas, multiply(diag_pre_multiply(sigmas_b, L_Rho_preds), z_preds));
            current_statement_begin__ = 82;
            stan::math::assign(L_Rho_preds_vector, lt_to_vector(L_Rho_preds, pstream__));
            current_statement_begin__ = 85;
            stan::math::assign(u, transpose(multiply(diag_pre_multiply(sigmas_u, L_Rho_species), z_species)));
            current_statement_begin__ = 87;
            stan::math::assign(L_Rho_spec_vector, lt_to_vector(L_Rho_species, pstream__));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 74;
            size_t betas_j_1_max__ = K;
            size_t betas_j_2_max__ = S;
            for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < betas_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(betas(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: betas" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable betas: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 75;
            size_t L_Rho_preds_vector_j_1_max__ = K_lower;
            for (size_t j_1__ = 0; j_1__ < L_Rho_preds_vector_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(L_Rho_preds_vector(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: L_Rho_preds_vector" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable L_Rho_preds_vector: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 76;
            size_t u_j_1_max__ = N;
            size_t u_j_2_max__ = S;
            for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < u_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(u(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: u" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable u: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 77;
            size_t L_Rho_spec_vector_j_1_max__ = S_lower;
            for (size_t j_1__ = 0; j_1__ < L_Rho_spec_vector_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(L_Rho_spec_vector(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: L_Rho_spec_vector" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable L_Rho_spec_vector: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 93;
            validate_non_negative_index("alpha", "N", N);
            validate_non_negative_index("alpha", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha(N, S);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            stan::math::assign(alpha,rep_matrix(add(a_bar, multiply(a, sigma_a)), S));
            current_statement_begin__ = 94;
            validate_non_negative_index("mu", "N", N);
            validate_non_negative_index("mu", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> mu(N, S);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,add(add(alpha, multiply(X, betas)), u));
            current_statement_begin__ = 97;
            lp_accum__.add(std_normal_log<propto__>(a));
            current_statement_begin__ = 98;
            lp_accum__.add(std_normal_log<propto__>(a_bar));
            current_statement_begin__ = 99;
            lp_accum__.add(std_normal_log<propto__>(sigma_a));
            current_statement_begin__ = 102;
            lp_accum__.add(std_normal_log<propto__>(sigmas_b));
            current_statement_begin__ = 103;
            lp_accum__.add(std_normal_log<propto__>(to_vector(z_preds)));
            current_statement_begin__ = 104;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Rho_preds, 1));
            current_statement_begin__ = 107;
            lp_accum__.add(std_normal_log<propto__>(sigmas_u));
            current_statement_begin__ = 108;
            lp_accum__.add(std_normal_log<propto__>(to_vector(z_species)));
            current_statement_begin__ = 109;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Rho_species, 1));
            current_statement_begin__ = 111;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 111;
                lp_accum__.add(poisson_log_log<propto__>(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Y"), stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "mu")));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("a_bar");
        names__.push_back("sigma_a");
        names__.push_back("a");
        names__.push_back("sigmas_b");
        names__.push_back("z_preds");
        names__.push_back("L_Rho_preds");
        names__.push_back("sigmas_u");
        names__.push_back("z_species");
        names__.push_back("L_Rho_species");
        names__.push_back("betas");
        names__.push_back("L_Rho_preds_vector");
        names__.push_back("u");
        names__.push_back("L_Rho_spec_vector");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K_lower);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S_lower);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(S);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mglmm_poisson_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double a_bar = in__.scalar_constrain();
        vars__.push_back(a_bar);
        double sigma_a = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_a);
        Eigen::Matrix<double, Eigen::Dynamic, 1> a = in__.vector_constrain(N);
        size_t a_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            vars__.push_back(a(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigmas_b = in__.vector_lb_constrain(0, K);
        size_t sigmas_b_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigmas_b_j_1_max__; ++j_1__) {
            vars__.push_back(sigmas_b(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_preds = in__.matrix_constrain(K, S);
        size_t z_preds_j_2_max__ = S;
        size_t z_preds_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < z_preds_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_preds_j_1_max__; ++j_1__) {
                vars__.push_back(z_preds(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Rho_preds = in__.cholesky_factor_corr_constrain(K);
        size_t L_Rho_preds_j_2_max__ = K;
        size_t L_Rho_preds_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_Rho_preds_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Rho_preds_j_1_max__; ++j_1__) {
                vars__.push_back(L_Rho_preds(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigmas_u = in__.vector_lb_constrain(0, S);
        size_t sigmas_u_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < sigmas_u_j_1_max__; ++j_1__) {
            vars__.push_back(sigmas_u(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_species = in__.matrix_constrain(S, N);
        size_t z_species_j_2_max__ = N;
        size_t z_species_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < z_species_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_species_j_1_max__; ++j_1__) {
                vars__.push_back(z_species(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Rho_species = in__.cholesky_factor_corr_constrain(S);
        size_t L_Rho_species_j_2_max__ = S;
        size_t L_Rho_species_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < L_Rho_species_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Rho_species_j_1_max__; ++j_1__) {
                vars__.push_back(L_Rho_species(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 74;
            validate_non_negative_index("betas", "K", K);
            validate_non_negative_index("betas", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> betas(K, S);
            stan::math::initialize(betas, DUMMY_VAR__);
            stan::math::fill(betas, DUMMY_VAR__);
            current_statement_begin__ = 75;
            validate_non_negative_index("L_Rho_preds_vector", "K_lower", K_lower);
            Eigen::Matrix<double, Eigen::Dynamic, 1> L_Rho_preds_vector(K_lower);
            stan::math::initialize(L_Rho_preds_vector, DUMMY_VAR__);
            stan::math::fill(L_Rho_preds_vector, DUMMY_VAR__);
            current_statement_begin__ = 76;
            validate_non_negative_index("u", "N", N);
            validate_non_negative_index("u", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> u(N, S);
            stan::math::initialize(u, DUMMY_VAR__);
            stan::math::fill(u, DUMMY_VAR__);
            current_statement_begin__ = 77;
            validate_non_negative_index("L_Rho_spec_vector", "S_lower", S_lower);
            Eigen::Matrix<double, Eigen::Dynamic, 1> L_Rho_spec_vector(S_lower);
            stan::math::initialize(L_Rho_spec_vector, DUMMY_VAR__);
            stan::math::fill(L_Rho_spec_vector, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 80;
            stan::math::assign(betas, multiply(diag_pre_multiply(sigmas_b, L_Rho_preds), z_preds));
            current_statement_begin__ = 82;
            stan::math::assign(L_Rho_preds_vector, lt_to_vector(L_Rho_preds, pstream__));
            current_statement_begin__ = 85;
            stan::math::assign(u, transpose(multiply(diag_pre_multiply(sigmas_u, L_Rho_species), z_species)));
            current_statement_begin__ = 87;
            stan::math::assign(L_Rho_spec_vector, lt_to_vector(L_Rho_species, pstream__));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t betas_j_2_max__ = S;
                size_t betas_j_1_max__ = K;
                for (size_t j_2__ = 0; j_2__ < betas_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
                        vars__.push_back(betas(j_1__, j_2__));
                    }
                }
                size_t L_Rho_preds_vector_j_1_max__ = K_lower;
                for (size_t j_1__ = 0; j_1__ < L_Rho_preds_vector_j_1_max__; ++j_1__) {
                    vars__.push_back(L_Rho_preds_vector(j_1__));
                }
                size_t u_j_2_max__ = S;
                size_t u_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < u_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                        vars__.push_back(u(j_1__, j_2__));
                    }
                }
                size_t L_Rho_spec_vector_j_1_max__ = S_lower;
                for (size_t j_1__ = 0; j_1__ < L_Rho_spec_vector_j_1_max__; ++j_1__) {
                    vars__.push_back(L_Rho_spec_vector(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 116;
            validate_non_negative_index("log_lik", "N", N);
            validate_non_negative_index("log_lik", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> log_lik(N, S);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            {
            current_statement_begin__ = 118;
            validate_non_negative_index("linpred", "N", N);
            validate_non_negative_index("linpred", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> linpred(N, S);
            stan::math::initialize(linpred, DUMMY_VAR__);
            stan::math::fill(linpred, DUMMY_VAR__);
            stan::math::assign(linpred,add(add(rep_matrix(add(a_bar, multiply(a, sigma_a)), S), multiply(X, betas)), u));
            current_statement_begin__ = 120;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 121;
                for (int j = 1; j <= S; ++j) {
                    current_statement_begin__ = 122;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                poisson_log_log(get_base1(get_base1(Y, i, "Y", 1), j, "Y", 2), get_base1(linpred, i, j, "linpred", 1)), 
                                "assigning variable log_lik");
                }
            }
            }
            // validate, write generated quantities
            current_statement_begin__ = 116;
            size_t log_lik_j_2_max__ = S;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < log_lik_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                    vars__.push_back(log_lik(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_mglmm_poisson";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_bar";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_a";
        param_names__.push_back(param_name_stream__.str());
        size_t a_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigmas_b_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigmas_b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmas_b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_preds_j_2_max__ = S;
        size_t z_preds_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < z_preds_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_preds_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_preds" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Rho_preds_j_2_max__ = K;
        size_t L_Rho_preds_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_Rho_preds_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Rho_preds_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Rho_preds" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigmas_u_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < sigmas_u_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmas_u" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_species_j_2_max__ = N;
        size_t z_species_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < z_species_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_species_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_species" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Rho_species_j_2_max__ = S;
        size_t L_Rho_species_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < L_Rho_species_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Rho_species_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Rho_species" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t betas_j_2_max__ = S;
            size_t betas_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < betas_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "betas" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t L_Rho_preds_vector_j_1_max__ = K_lower;
            for (size_t j_1__ = 0; j_1__ < L_Rho_preds_vector_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Rho_preds_vector" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t u_j_2_max__ = S;
            size_t u_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < u_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "u" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t L_Rho_spec_vector_j_1_max__ = S_lower;
            for (size_t j_1__ = 0; j_1__ < L_Rho_spec_vector_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Rho_spec_vector" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_2_max__ = S;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < log_lik_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_bar";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_a";
        param_names__.push_back(param_name_stream__.str());
        size_t a_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigmas_b_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigmas_b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmas_b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_preds_j_2_max__ = S;
        size_t z_preds_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < z_preds_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_preds_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_preds" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Rho_preds_j_1_max__ = ((K * (K - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_Rho_preds_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Rho_preds" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigmas_u_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < sigmas_u_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmas_u" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_species_j_2_max__ = N;
        size_t z_species_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < z_species_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_species_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_species" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Rho_species_j_1_max__ = ((S * (S - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_Rho_species_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Rho_species" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t betas_j_2_max__ = S;
            size_t betas_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < betas_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "betas" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t L_Rho_preds_vector_j_1_max__ = K_lower;
            for (size_t j_1__ = 0; j_1__ < L_Rho_preds_vector_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Rho_preds_vector" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t u_j_2_max__ = S;
            size_t u_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < u_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "u" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t L_Rho_spec_vector_j_1_max__ = S_lower;
            for (size_t j_1__ = 0; j_1__ < L_Rho_spec_vector_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Rho_spec_vector" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_2_max__ = S;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < log_lik_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_mglmm_poisson_namespace::model_mglmm_poisson stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
