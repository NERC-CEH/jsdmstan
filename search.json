[{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://nerc-ceh.github.io/jsdmstan/articles/jsdmstan-overview.html","id":"joint-species-distribution-models","dir":"Articles","previous_headings":"","what":"Joint Species Distribution Models","title":"Overview","text":"Joint Species Distibution Models, jSDMs, models model entire community species simultaneously. idea behind allow information borrowed across species, covariance species can used inform predictions distributions related commonly co-occurring species. plain language (plain can manage) jSDMs involve modelling entire species community function combination intercepts, covariate data species covariance. Therefore change single species related change environment also relates species. several decisions made specify models - standard decisions covariates include, whether species intercept (generally yes) represent change across sites - also represent covariance species. two options representing species covariance package. First, original way running jSDMs model entire covariance matrix species multivariate generalised linear mixed model (MGLMM). However, recently methods developed involve representing covariance matrix set linear latent variables - known generalised linear latent variable models (GLLVM). jsdmstan package aims provide interface fitting models Stan using Stan Hamiltonian Monte Carlo sampling robust Bayesian methodology.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/articles/jsdmstan-overview.html","id":"underlying-maths","dir":"Articles","previous_headings":"Joint Species Distribution Models","what":"Underlying maths","title":"Overview","text":"Feel free skip bit don’t want read equations, largely based Warton et al. (2015). model community data mijm_{ij} site ii taxon jj function species intercept, environmental covariates species covariance matrix: g(mij)=β0j+𝐱i⊺βj+uij g(m_{ij}) = \\beta_{0j} + \\mathbf{x}_i^\\intercal\\beta_j + u_{ij} g(⋅)g(\\cdot) link function, 𝐱i⊺\\mathbf{x}_i^\\intercal transpose vector 𝐱\\mathbf{x}, taxon jj, β0j\\beta_{0j} intercept betajbeta_j vector regression coefficients related measured predictors. site effect αi\\alpha_{} can also added adjust total abundance richness: g(mij)=αi+β0j+𝐱i⊺βj+uij g(m_{ij}) = \\alpha_{} + \\beta_{0j} + \\mathbf{x}_i^\\intercal\\beta_j + u_{ij}","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/articles/jsdmstan-overview.html","id":"multivariate-generalised-linear-mixed-models","dir":"Articles","previous_headings":"Joint Species Distribution Models","what":"Multivariate Generalised Linear Mixed Models","title":"Overview","text":"entire matrix covariance species modelled MGLMMs. uij∼N(𝟎,𝚺) u_{ij} \\sim \\mathrm{N}(\\mathbf{0},\\mathbf{\\Sigma}) Fitting entire covariance matrix means amount time required fit models scales number species cubed, data required scales number species squared. makes models computationally data intensive.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/articles/jsdmstan-overview.html","id":"generalised-linear-latent-variable-models","dir":"Articles","previous_headings":"Joint Species Distribution Models","what":"Generalised Linear Latent Variable Models","title":"Overview","text":"response issues fitting MGLMMs, GLLVMs developed uiju_{ij} now specified linear function set latent variables 𝐳𝐢\\mathbf{z_i}: yij|𝐮i∼F(mij,ϕj) y_{ij}|\\mathbf{u}_i \\sim \\mathrm{F}(m_{ij},\\phi_j) uij=𝐳i⊺λj u_{ij} = \\mathbf{z}_i^\\intercal \\lambda_j latent variables 𝐳𝐢\\mathbf{z_i} treated random assuming: yij|𝐳𝐢∼F(mij,ϕj))y_{ij}|\\mathbf{z_i} \\sim \\mathrm{F}(m_{ij},\\phi_j)) 𝐳𝐢∼N(𝟎,𝟏)\\mathbf{z_i} \\sim \\mathrm{N}(\\mathbf{0},\\mathbf{1})  Treating species covariance pulling set latent variables greatly reduces computational time required fit models.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/articles/jsdmstan-overview.html","id":"relationship-to-environmental-covariates","dir":"Articles","previous_headings":"Joint Species Distribution Models","what":"Relationship to environmental covariates","title":"Overview","text":"default approach jsdmstan assume response species environmental covariates constrained covariance matrix environmental covariates. assumes one species strongly positively related multiple covariates likely species either also positively related covariates, negatively related. Mathematically maybe corresponds : βj∼N(𝟎,𝚺)\\beta_j \\sim \\mathrm{N}(\\mathbf{0},\\mathbf{\\Sigma}) default behaviour can overridden specifying beta_param argument \"unstruct\" want betas just draw distribution set jsdm_prior().","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/articles/jsdmstan-overview.html","id":"fitting-a-mglmm","dir":"Articles","previous_headings":"","what":"Fitting a MGLMM","title":"Overview","text":"First can use -built functions simulating data according MGLMM model - ’ll choose simulate 15 species 200 sites 2 environmental covariates. species assumed follow Poisson distribution (log-link), use defaults including species-specific intercept site-specific intercept. moment default priors (standard normal distribution) supported. can using either jsdm_sim_data function method = \"mglmm\" mglmm_sim_data function just calls jsdm_sim_data background. returns list, includes Y matrix, X matrix, plus also exact parameters used create data: Now, fit model can use stan_jsdm function, interfaces Stan rstan package. two ways supply data stan_jsdm function, one supply data list appropriate named components (jsdm_sim_data functions supply data correct format already) specify Y X matrices directly, ’ll use : print model object get brief overview type jSDM data, plus parameters Rhat > 1.01 effective sample size ratio (Neff/N) < 0.05 printed: get summary model parameters can use summary, many parameters models just include : get better overview R-hat effective sample size can use mcmc_plot function plot histograms R-hat ESS.   can also examine output parameter visually using traceplot combined density plot, given default plot command:   default plot command plots parameters sigma kappa name plus random selection 20 parameters, can overridden either specifying parameters name (without regular expression matching) changing number parameters randomly sampled. Use get_parnames function get names parameters within model - jsdm_stancode function can also used see underlying structure model. mcmc plot types within bayesplot supported mcmc_plot function, see full list either use bayesplot::available_mcmc run mcmc_plot incorrect type options printed. can also view environmental effect parameters species using envplot function.  Posterior predictions can extracted models using either posterior_linpred posterior_predict, linpred function extracts linear predictor community composition within draw predict function combines linear predictor extraction random generation based predicted probability family. functions default return list length equal number draws extracted, element list sites species matrix. well MCMC plotting functions within bayesplot ppc_ family functions also supported pp_check function. family functions provides graphical way check posterior data used within model evaluate model fit - called posterior retrodictive check (posterior predictive historically prior sampled ). use need set save_data = TRUE within stan_jsdm call. Unlike packages default pp_check jsdmStanFit objects extracts posterior predictions calculates summary statistics rows plots summary statistics original data. default behaviour calculate sum species per site - .e. total abundance.  summary statistic can changed, can whether calculated every species every site:  can examine species-specific posterior predictive check using multi_pp_check, examine well relationships specific species recovered using pp_check plotfun = \"pairs\". run model simulated data original data list contains parameters used simulate data can use mcmc_recover_ functions bayesplot see model :","code":"nsites <- 60 nspecies <- 8 ncovar <- 2 mglmm_test_data <- mglmm_sim_data(N = nsites, S = nspecies,                                    K = ncovar, family = \"pois\") names(mglmm_test_data) #> [1] \"Y\"    \"pars\" \"N\"    \"S\"    \"D\"    \"K\"    \"X\" dat <- as.data.frame(mglmm_test_data$X) mglmm_fit <- stan_jsdm(~ V1 + V2, data = dat, Y = mglmm_test_data$Y,                         family = \"pois\", method = \"mglmm\", refresh = 0,                        log_lik = FALSE) #> Warning: There were 16 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems mglmm_fit #> Family: poisson  #>  Model type: mglmm #>   Number of species: 8 #>   Number of sites: 60 #>   Number of predictors: 3 #>  #> Model run on 4 chains with 4000 iterations per chain (2000 warmup). #>  #> No parameters with Rhat > 1.01 or Neff/N < 0.05 summary(mglmm_fit, pars = \"cor_species\") #>                    mean    sd    15%    85%  Rhat Bulk.ESS Tail.ESS #> cor_species[2,1]  0.034 0.278 -0.259  0.322 1.002     1495     2747 #> cor_species[3,1]  0.010 0.174 -0.173  0.191 1.001     3276     4913 #> cor_species[4,1]  0.234 0.176  0.054  0.414 1.001     3019     3788 #> cor_species[5,1]  0.085 0.118 -0.037  0.207 1.000     4691     5654 #> cor_species[6,1] -0.129 0.181 -0.318  0.059 1.001     3064     4557 #> cor_species[7,1] -0.185 0.136 -0.328 -0.041 1.000     3437     5220 #> cor_species[8,1] -0.284 0.240 -0.534 -0.039 1.000     1879     2738 #> cor_species[1,2]  0.034 0.278 -0.259  0.322 1.002     1495     2747 #> cor_species[2,2]  1.000 0.000  1.000  1.000 1.000     7975       NA #> cor_species[3,2]  0.023 0.268 -0.257  0.301 1.001     2060     3217 #> cor_species[4,2] -0.259 0.290 -0.557  0.047 1.001     2158     2849 #> cor_species[5,2]  0.084 0.265 -0.189  0.355 1.003     1162     2139 #> cor_species[6,2] -0.011 0.279 -0.303  0.278 1.001     2477     3903 #> cor_species[7,2]  0.126 0.274 -0.150  0.408 1.004     1287     1578 #> cor_species[8,2]  0.014 0.292 -0.294  0.326 1.001     3450     4863 #> cor_species[1,3]  0.010 0.174 -0.173  0.191 1.001     3276     4913 #> cor_species[2,3]  0.023 0.268 -0.257  0.301 1.001     2060     3217 #> cor_species[3,3]  1.000 0.000  1.000  1.000 1.001     7935       NA #> cor_species[4,3]  0.037 0.176 -0.149  0.226 1.000     4627     6310 #> cor_species[5,3]  0.456 0.146  0.304  0.607 1.000     3544     5675 #> cor_species[6,3]  0.479 0.180  0.292  0.668 1.001     4833     4769 #> cor_species[7,3] -0.270 0.148 -0.424 -0.114 1.000     3859     5961 #> cor_species[8,3]  0.295 0.218  0.070  0.521 1.000     3637     4568 #> cor_species[1,4]  0.234 0.176  0.054  0.414 1.001     3019     3788 #> cor_species[2,4] -0.259 0.290 -0.557  0.047 1.001     2158     2849 #> cor_species[3,4]  0.037 0.176 -0.149  0.226 1.000     4627     6310 #> cor_species[4,4]  1.000 0.000  1.000  1.000 1.000     7756     7888 #> cor_species[5,4] -0.194 0.173 -0.372 -0.015 1.002     2764     5006 #> cor_species[6,4] -0.125 0.194 -0.325  0.076 1.000     5454     6385 #> cor_species[7,4] -0.192 0.162 -0.358 -0.021 1.001     3498     6225 #> cor_species[8,4] -0.181 0.232 -0.419  0.061 1.001     4442     4348 #> cor_species[1,5]  0.085 0.118 -0.037  0.207 1.000     4691     5654 #> cor_species[2,5]  0.084 0.265 -0.189  0.355 1.003     1162     2139 #> cor_species[3,5]  0.456 0.146  0.304  0.607 1.000     3544     5675 #> cor_species[4,5] -0.194 0.173 -0.372 -0.015 1.002     2764     5006 #> cor_species[5,5]  1.000 0.000  1.000  1.000 1.000     7799     7312 #> cor_species[6,5]  0.210 0.177  0.030  0.394 1.001     3504     4861 #> cor_species[7,5]  0.179 0.119  0.056  0.300 1.001     4646     5950 #> cor_species[8,5]  0.225 0.218  0.000  0.452 1.001     2221     3270 #> cor_species[1,6] -0.129 0.181 -0.318  0.059 1.001     3064     4557 #> cor_species[2,6] -0.011 0.279 -0.303  0.278 1.001     2477     3903 #> cor_species[3,6]  0.479 0.180  0.292  0.668 1.001     4833     4769 #> cor_species[4,6] -0.125 0.194 -0.325  0.076 1.000     5454     6385 #> cor_species[5,6]  0.210 0.177  0.030  0.394 1.001     3504     4861 #> cor_species[6,6]  1.000 0.000  1.000  1.000 1.000     8022     7840 #> cor_species[7,6] -0.388 0.175 -0.566 -0.212 1.002     3488     2981 #> cor_species[8,6]  0.374 0.220  0.151  0.599 1.000     4011     3758 #> cor_species[1,7] -0.185 0.136 -0.328 -0.041 1.000     3437     5220 #> cor_species[2,7]  0.126 0.274 -0.150  0.408 1.004     1287     1578 #> cor_species[3,7] -0.270 0.148 -0.424 -0.114 1.000     3859     5961 #> cor_species[4,7] -0.192 0.162 -0.358 -0.021 1.001     3498     6225 #> cor_species[5,7]  0.179 0.119  0.056  0.300 1.001     4646     5950 #> cor_species[6,7] -0.388 0.175 -0.566 -0.212 1.002     3488     2981 #> cor_species[7,7]  1.000 0.000  1.000  1.000 1.001     8148     8086 #> cor_species[8,7]  0.006 0.230 -0.232  0.241 1.001     2518     3398 #> cor_species[1,8] -0.284 0.240 -0.534 -0.039 1.000     1879     2738 #> cor_species[2,8]  0.014 0.292 -0.294  0.326 1.001     3450     4863 #> cor_species[3,8]  0.295 0.218  0.070  0.521 1.000     3637     4568 #> cor_species[4,8] -0.181 0.232 -0.419  0.061 1.001     4442     4348 #> cor_species[5,8]  0.225 0.218  0.000  0.452 1.001     2221     3270 #> cor_species[6,8]  0.374 0.220  0.151  0.599 1.000     4011     3758 #> cor_species[7,8]  0.006 0.230 -0.232  0.241 1.001     2518     3398 #> cor_species[8,8]  1.000 0.000  1.000  1.000 1.000     7823     7886 mcmc_plot(mglmm_fit, plotfun = \"rhat_hist\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. mcmc_plot(mglmm_fit, plotfun = \"neff_hist\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. plot(mglmm_fit, ask = FALSE) #> Warning in regularize.values(x, y, ties, missing(ties), na.rm = na.rm): #> collapsing to unique 'x' values envplot(mglmm_fit) mglmm_pp <- posterior_predict(mglmm_fit) length(mglmm_pp) #> [1] 8000 dim(mglmm_pp[[1]]) #> [1] 60  8 pp_check(mglmm_fit) #> Using 10 posterior draws for ppc plot type 'ppc_dens_overlay' by default. pp_check(mglmm_fit, summary_stat = \"mean\", calc_over = \"species\",          plotfun = \"ecdf_overlay\") #> Using 10 posterior draws for ppc plot type 'ppc_ecdf_overlay' by default. mcmc_plot(mglmm_fit, plotfun = \"recover_hist\",           pars = paste0(\"sigmas_species[\",1:8,\"]\"),           true = mglmm_test_data$pars$sigmas_species) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. mcmc_plot(mglmm_fit, plotfun = \"recover_intervals\",           pars = paste0(\"cor_species[\",rep(1:nspecies, nspecies:1),\",\",                         unlist(sapply(1:8, \":\",8)),\"]\"),           true = c(mglmm_test_data$pars$cor_species[lower.tri(mglmm_test_data$pars$cor_species, diag = TRUE)])) +   theme(axis.text.x = element_text(angle = 90))"},{"path":"https://nerc-ceh.github.io/jsdmstan/articles/jsdmstan-overview.html","id":"fitting-a-gllvm","dir":"Articles","previous_headings":"","what":"Fitting a GLLVM","title":"Overview","text":"model fitting workflow latent variable models similar , addition specifying number latent variables (D) data simulation model fit. also specify different prior default using jsdm_prior function. , diagnostic statistics seem reasonable:   brevity’s sake go detail different functions , however one plotting function specifically GLLVM models - ordiplot. plots species sites scores latent variables random selection draws:   can change latent variables selected specifying choices argument, alter number draws whether want plot species sites arguments.","code":"set.seed(3562251) gllvm_test_data <- gllvm_sim_data(N = 32, S = 7, D = 2, family = \"gaussian\",                                   prior = jsdm_prior(sigma = \"student_t(3,0,1)\",                                                      sigmas_preds = \"student_t(3,0,1)\"),                                   beta_param = \"cor\") gllvm_fit <- stan_jsdm(Y = gllvm_test_data$Y, X = gllvm_test_data$X,                        D = gllvm_test_data$D,                          family = \"gaussian\",                        method = \"gllvm\",                         beta_param = \"cor\",                        prior = jsdm_prior(sigma = \"student_t(3,0,1)\",                                           sigmas_preds = \"student_t(3,0,1)\"),                        refresh = 0, log_lik = FALSE) #> Warning: There were 526 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: There were 1596 transitions after warmup that exceeded the maximum treedepth. Increase max_treedepth above 10. See #> https://mc-stan.org/misc/warnings.html#maximum-treedepth-exceeded #> Warning: There were 4 chains where the estimated Bayesian Fraction of Missing Information was low. See #> https://mc-stan.org/misc/warnings.html#bfmi-low #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess gllvm_fit #> Family: gaussian  #>  With parameters: sigma,   #> Model type: gllvm with 2 latent variables #>   Number of species: 7 #>   Number of sites: 32 #>   Number of predictors: 1 #>  #> Model run on 4 chains with 4000 iterations per chain (2000 warmup). #>  #> Parameters with Rhat > 1.01, or Neff/N < 0.05: #>             mean     sd      15%     85%  Rhat Bulk.ESS Tail.ESS #> sigma[2]   0.133  0.077    0.058   0.215 1.047      129       43 #> sigma[6]   0.567  0.316    0.200   0.927 1.015      195      131 #> lp__     -74.967 29.697 -102.928 -45.776 1.047       84       61 #> sigma[3]   0.656  0.234    0.400   0.875 1.006      460      271 mcmc_plot(gllvm_fit, plotfun = \"rhat_hist\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. mcmc_plot(gllvm_fit, plotfun = \"neff_hist\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ordiplot(gllvm_fit) ordiplot(gllvm_fit, type = \"sites\", geom = \"text\", ndraws = 0) +   theme(legend.position = \"none\")"},{"path":"https://nerc-ceh.github.io/jsdmstan/articles/jsdmstan-overview.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Overview","text":"Warton et al (2015) many variables: joint modeling community ecology. Trends Ecology & Evolution, 30:766-779. DOI: 10.1016/j.tree.2015.09.007. Wilkinson et al (2021) Defining evaluating predictions joint species distribution models. Methods Ecology Evolution, 12:394-404. DOI: 10.1111/2041-210X.13518. Vehtari, ., Gelman, ., Gabry, J. (2017). Practical Bayesian model evaluation using leave-one-cross-validation WAIC. Statistics Computing. 27(5), 1413–1432. DOI: 10.1007/s11222-016-9696-4.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fiona Seaton. Author, maintainer.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Seaton F (2024). jsdmstan: Fitting jSDMs Stan. R package version 0.4.1, https://nerc-ceh.github.io/jsdmstan/.","code":"@Manual{,   title = {jsdmstan: Fitting jSDMs in Stan},   author = {Fiona Seaton},   year = {2024},   note = {R package version 0.4.1},   url = {https://nerc-ceh.github.io/jsdmstan/}, }"},{"path":"https://nerc-ceh.github.io/jsdmstan/index.html","id":"jsdmstan-joint-species-distribution-models-in-stan","dir":"","previous_headings":"","what":"Fitting jSDMs in Stan","title":"Fitting jSDMs in Stan","text":"R package running joint Species Distribution Models (jSDM) Stan. jSDMs models multiple response variables (.e. species) fit time, covariance species used inform model results. review jSDMs see Warton et al. (2015) many variables: joint modelling community ecology. TREE, 30:766-779 DOI: 10.1016/j.tree.2015.09.007. package can fit data Multivariate Generalised Linear Mixed Model (MGLMM) Generalised Linear Latent Variable Model (GLLVM), also provides functionality simulating data scenarios interface bayesplot package wide variety plotting options.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fitting jSDMs in Stan","text":"package can installed using remotes package using following code:","code":"# install.packages(\"remotes\") remotes::install_github(\"NERC-CEH/jsdmstan\")"},{"path":"https://nerc-ceh.github.io/jsdmstan/index.html","id":"using-jsdmstan","dir":"","previous_headings":"","what":"Using jsdmstan","title":"Fitting jSDMs in Stan","text":"Example code: Simulate data: Fit Stan model: Plot results: work funded Natural Environment Research Council (part UK Research Innovation) UK-SCAPE Programme delivering National Capability (Grant Reference NE/R016429/1).","code":"library(jsdmstan) nsites <- 200 nspecies <- 9 ncovar <- 2 mglmm_test_data <- mglmm_sim_data(N = nsites, S = nspecies,                                   K = ncovar, family = \"pois\") dat <- as.data.frame(mglmm_test_data$X) mglmm_fit <- stan_jsdm(~ V1 + V2, data = dat, Y = mglmm_test_data$Y,                        family = \"pois\", method = \"mglmm\") plot(mglmm_fit) mcmc_plot(mglmm_fit, plotfun = \"rhat_hist\")"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/corrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot modelled correlations between species — corrplot","title":"Plot modelled correlations between species — corrplot","text":"Plot modelled correlations species","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/corrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot modelled correlations between species — corrplot","text":"","code":"corrplot(   object,   species = NULL,   plotfun = \"intervals\",   nrow = NULL,   widths = NULL,   ... )"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/corrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot modelled correlations between species — corrplot","text":"object jsdmStanFit model object species species included - plots correlations specified species species, default species included result plot per species species thus duplicate entries across plots plotfun plotting function bayesplot use, default \"intervals\" nrow many rows grid plots widths Whether widths different rows plots vary ... arguments passed mcmc_plot","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/corrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot modelled correlations between species — corrplot","text":"object class \"bayesplot_grid\", information see bayesplot::bayesplot_grid()","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/envplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting environmental effects on species — envplot","title":"Plotting environmental effects on species — envplot","text":"Plotting environmental effects species","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/envplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting environmental effects on species — envplot","text":"","code":"envplot(   object,   include_intercept = FALSE,   nrow = NULL,   y_labels = NULL,   plotfun = \"intervals\",   widths = NULL )"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/envplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting environmental effects on species — envplot","text":"object jsdmStanFit model object include_intercept Whether include intercept plots nrow number rows within plot y_labels plots annotated y axes. Needs given integer vector plotfun plot function mcmc_plot used, default \"intervals\" widths widths plots","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/envplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting environmental effects on species — envplot","text":"object class \"bayesplot_grid\", information see bayesplot::bayesplot_grid()","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/extract.jsdmStanFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract samples from jsdmStanFit object — extract.jsdmStanFit","title":"Extract samples from jsdmStanFit object — extract.jsdmStanFit","text":"function extracts named parameters jsdmStanFit object, optional regular expression matching.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/extract.jsdmStanFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract samples from jsdmStanFit object — extract.jsdmStanFit","text":"","code":"# S3 method for class 'jsdmStanFit' extract(   object,   pars = NULL,   permuted = FALSE,   inc_warmup = FALSE,   include = TRUE,   regexp = FALSE,   return_array = FALSE,   ... )  extract(object, ...)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/extract.jsdmStanFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract samples from jsdmStanFit object — extract.jsdmStanFit","text":"object jsdmStanFit model object pars character vector parameter names permuted Whether draws randomly permuted, default FALSE inc_warmup Whether warmup period included, default FALSE include Whether parameters specified pars included excluded result, default TRUE inclusion regexp Whether regular expression matching used match contents pars parameter names, default FALSE return_array Whether return output 3 dimensional array (TRUE) named list (FALSE, default) ... Arguments passed get_parnames()","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/extract.jsdmStanFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract samples from jsdmStanFit object — extract.jsdmStanFit","text":"return_array = FALSE returns named list parameter group element list. list element array first dimension iteration (chains appended) dimensions coming parameter dimensions. return_array = TRUE 3 dimensional array returned first dimension iterations, second chains third parameters.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/extract.jsdmStanFit.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Extract samples from jsdmStanFit object — extract.jsdmStanFit","text":"extract(): Generic method","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdmStanFamily.html","id":null,"dir":"Reference","previous_headings":"","what":"jsdmStanFamily class — jsdmStanFamily","title":"jsdmStanFamily class — jsdmStanFamily","text":"jsdmStanFamily class, occupies slot within jsdmStanFit object.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdmStanFamily.html","id":"elements-for-jsdmstanfamily-objects","dir":"Reference","previous_headings":"","what":"Elements for jsdmStanFamily objects","title":"jsdmStanFamily class — jsdmStanFamily","text":"family length one character vector describing family used fit object. Options \"gaussian\", \"poisson\", \"bernoulli\", \"neg_binomial\", \"binomial\", \"zi_poisson\", \"zi_neg_binomial\", \"multiple\". params character vector includes names family-specific parameters. params_dataresp character vector includes named family-specific parameters modelled response data. preds character vector measured predictors included family parameters modelled response data. family parameters modelled response data left empty. data_list list containing original data used fit model (empty save_data set FALSE family parameters modelled response data).","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdmStanFit.html","id":null,"dir":"Reference","previous_headings":"","what":"jsdmStanFit class — jsdmStanFit","title":"jsdmStanFit class — jsdmStanFit","text":"jsdmStanFit class, stan_gllvm stan_mglmm create.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdmStanFit.html","id":"elements-for-jsdmstanfit-objects","dir":"Reference","previous_headings":"","what":"Elements for jsdmStanFit objects","title":"jsdmStanFit class — jsdmStanFit","text":"jsdm_type length one character vector describing type jSDM family jsdmStanFamily object describing characteristics family species character vector species names sites character vector site IDs preds character vector measured predictors included data_list list containing original data used fit model (empty save_data set FALSE) n_latent length one integer vector representing number latent variables (gllvm type fits) NA cases","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Create prior object for jsdmstan models and data simulation — jsdm_prior","title":"Create prior object for jsdmstan models and data simulation — jsdm_prior","text":"function creates potential priors used within jsdmstan model can used input stan_jsdm() family functions jsdm_sim_data() functions.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create prior object for jsdmstan models and data simulation — jsdm_prior","text":"","code":"jsdm_prior(   sigmas_preds = \"normal(0,1)\",   z_preds = \"normal(0,1)\",   cor_preds = \"lkj_corr(1)\",   betas = \"normal(0,1)\",   a = \"normal(0,1)\",   a_bar = \"normal(0,1)\",   sigma_a = \"normal(0,1)\",   sigmas_species = \"normal(0,1)\",   z_species = \"normal(0,1)\",   cor_species = \"lkj_corr(1)\",   LV = \"normal(0,1)\",   L = \"normal(0,1)\",   sigma_L = \"normal(0,1)\",   sigma = \"normal(0,1)\",   kappa = \"normal(0,1)\",   zi = \"beta(1,1)\",   zi_betas = \"normal(0,1)\" )  # S3 method for class 'jsdmprior' print(x, ...)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create prior object for jsdmstan models and data simulation — jsdm_prior","text":"sigmas_preds standard deviation covariate effects, constrained positive (default standard normal) z_preds covariate effects (default standard normal) cor_preds correlation matrix covariate effects (npred npred correlation matrix) (default \"lkj_corr(1)\") betas covariate effects unstructured, prior covariate effects site level intercepts (default standard normal) a_bar mean site level intercept sigma_a standard deviation site level intercepts, constrained positive default prior half standard normal sigmas_species MGLMM method, standard deviations species covariances, constrained positive (default half standard normal) z_species MGLMM method, S N matrix species covariance site (default standard normal) cor_species MGLMM method, correlation species represented nspecies nspecies correlation matrix (default \"lkj_corr(1)\") LV GLLVM method, per site latent variable loadings (default standard normal) L GLLVM method, non-zero species latent variable loadings (default standard normal) sigma_L GLLVM method, variance species loadings, constrained positive (default standard normal) sigma Gaussian response, standard deviation parameter. Constrained positive (default standard normal) kappa negative binomial response, negative binomial variance parameter. Constrained positive (default standard normal) zi zero-inflated poisson negative binomial environmental covariate effects upon zero-inflation, proportion inflated zeros (default beta distribution alpha beta parameters set 1). zi_betas zero-inflated poisson negative binomial environmental effects upon zero-inflation, covariate effects zero-inflation logit scale x Object class jsdmprior ... Currently unused","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create prior object for jsdmstan models and data simulation — jsdm_prior","text":"object class \"jsdmprior\" taking form named list","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create prior object for jsdmstan models and data simulation — jsdm_prior","text":"prior specified character string corresponding appropriate stan command. common versions supported simulated data functions, however functions can fed stan fitting procedure able used input jsdm_sim_data(). Parameters sigmas_preds, sigma_a, sigmas_species, sigma_L, sigma, kappa fixed positive stan code changed. Parameters cor_preds cor_species assumed Cholesky factor correlation matrix. parameters real numbers. parameters represent vectors matrices prior across entire vector matrix (note species latent variable loadings GLLVM model prior set non-zero matrix components L entire matrix). Prior distributions supported jsdm_sim_data() \"normal(mean, sd)\", \"student_t(df, mu, sigma)\", \"cauchy(location, scale)\", \"gamma(shape, scale)\", \"inv_gamma(shape, scale)\" \"lkj_corr_cholesky(eta)\".","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_prior.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create prior object for jsdmstan models and data simulation — jsdm_prior","text":"print(jsdmprior): Print method object class jsdmprior","code":""},{"path":[]},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create prior object for jsdmstan models and data simulation — jsdm_prior","text":"","code":"pr <- jsdm_prior(kappa = \"gamma(0.01,0.01)\") pr #>         Parameter             Group      Constraint            Prior #> 1    sigmas_preds covariate_effects         lower=0      normal(0,1) #> 2         z_preds covariate_effects            none      normal(0,1) #> 3       cor_preds covariate_effects            none      lkj_corr(1) #> 4           betas covariate_effects            none      normal(0,1) #> 5               a    site_intercept            none      normal(0,1) #> 6           a_bar    site_intercept            none      normal(0,1) #> 7         sigma_a    site_intercept         lower=0      normal(0,1) #> 8  sigmas_species             mglmm         lower=0      normal(0,1) #> 9       z_species             mglmm            none      normal(0,1) #> 10    cor_species             mglmm            none      lkj_corr(1) #> 11             LV             gllvm            none      normal(0,1) #> 12              L             gllvm            none      normal(0,1) #> 13        sigma_L             gllvm         lower=0      normal(0,1) #> 14          sigma          gaussian         lower=0      normal(0,1) #> 15          kappa      neg_binomial         lower=0 gamma(0.01,0.01) #> 16             zi    zero_inflation lower=0,upper=1        beta(1,1) #> 17       zi_betas    zero_inflation            none      normal(0,1)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_sim_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate simulated data within a variety of jSDM methodologies — jsdm_sim_data","title":"Generate simulated data within a variety of jSDM methodologies — jsdm_sim_data","text":"jsdm_sim_data function can simulate data either multivariate generalised mixed model (MGLMM) generalised linear latent variable model (GLLVM). gllvm_sim_data mglmm_sim_data aliases jsdm_sim_data set method \"gllvm\" \"mglmm\" respectively.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_sim_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate simulated data within a variety of jSDM methodologies — jsdm_sim_data","text":"","code":"jsdm_sim_data(   N,   S,   D = NULL,   K = 0L,   family,   method = c(\"gllvm\", \"mglmm\"),   species_intercept = TRUE,   Ntrials = NULL,   site_intercept = \"none\",   beta_param = \"unstruct\",   zi_param = \"constant\",   zi_k = NULL,   prior = jsdm_prior() )  gllvm_sim_data(...)  mglmm_sim_data(...)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_sim_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate simulated data within a variety of jSDM methodologies — jsdm_sim_data","text":"N number sites S number species D number latent variables, used within gllvm method K number covariates, default 0 family response family, must one \"gaussian\", \"neg_binomial\", \"poisson\", \"binomial\", \"bernoulli\", \"zi_poisson\", \"zi_neg_binomial\". Regular expression matching supported. method jSDM method use, currently either \"gllvm\" \"mglmm\" - see details information. species_intercept Whether include intercept predictors, must TRUE K 0. Defaults TRUE. Ntrials binomial distribution number trials, given either single integer assumed constant across sites site-length vector integers. site_intercept Whether site intercept included, potential values \"none\" (site intercept) \"ungrouped\" (site intercept grouping). Defaults site intercept, grouped supported currently. beta_param parameterisation environmental covariate effects, default \"unstruct\". See details information. zi_param zero-inflated families, whether zero-inflation parameter species-specific constant (default, \"constant\"), varies environmental covariates (\"covariate\"). zi_k zi=\"covariate\", number environmental covariates zero-inflation parameter responds . default (NULL) zero-inflation parameter responds exactly covariate matrix mean parameter. Otherwise, different set random environmental covariates generated, plus intercept (included zi_k) used predict zero-inflation prior Set prior specifications call jsdm_prior() ... Arguments passed jsdm_sim_data","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_sim_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate simulated data within a variety of jSDM methodologies — jsdm_sim_data","text":"simulates data based joint species distribution model either generalised linear latent variable model approach multivariate generalised linear mixed model approach. Models can fit without \"measured predictors\", measured predictors included species species-specific parameter estimates. can either simulated completely independently, information pooled across species. information pooled can modelled either random draw mean standard deviation species covariance can modelled together (covariance used overall model method used covariance). Environmental covariate effects (\"betas\") can parameterised two ways. \"cor\" parameterisation covariate effects assumed constrained correlation matrix covariates. \"unstruct\" parameterisation covariate effects assumed draw simple distribution correlation structure. parameterisations can modified using prior object.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_sim_data.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generate simulated data within a variety of jSDM methodologies — jsdm_sim_data","text":"gllvm_sim_data(): Alias jsdm_sim_data method = \"gllvm\" mglmm_sim_data(): Alias jsdm_sim_data method = \"mglmm\"","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_stancode.html","id":null,"dir":"Reference","previous_headings":"","what":"Make stancode for the jsdm model — jsdm_stancode","title":"Make stancode for the jsdm model — jsdm_stancode","text":"function returns Stan code used fit model specified data list, family method.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_stancode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make stancode for the jsdm model — jsdm_stancode","text":"","code":"jsdm_stancode(   method,   family,   prior = jsdm_prior(),   log_lik = TRUE,   site_intercept = \"none\",   beta_param = \"cor\",   zi_param = \"constant\" )  # S3 method for class 'jsdmstan_model' print(x, ...)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_stancode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make stancode for the jsdm model — jsdm_stancode","text":"method method, one \"gllvm\" \"mglmm\" family response family, must one \"gaussian\", \"neg_binomial\", \"poisson\", \"binomial\", \"bernoulli\", \"zi_poisson\", \"zi_neg_binomial\". Regular expression matching supported. prior prior, given result call jsdm_prior() log_lik Whether log likelihood calculated generated quantities (default TRUE), required loo site_intercept Whether site intercept included, potential values \"none\" (site intercept), \"grouped\" (site intercept hierarchical grouping) \"ungrouped\" (site intercept grouping) beta_param parameterisation environmental covariate effects, default \"cor\". See details information. zi_param zero-inflated families, whether zero-inflation parameter species-specific constant (default, \"constant\"), varies environmental covariates (\"covariate\"). x jsdm_stancode object ... Currently unused","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_stancode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make stancode for the jsdm model — jsdm_stancode","text":"character vector Stan code, class \"jsdmstan_model\"","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_stancode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make stancode for the jsdm model — jsdm_stancode","text":"Environmental covariate effects (\"betas\") can parameterised two ways. \"cor\" parameterisation covariate effects assumed constrained correlation matrix covariates. \"unstruct\" parameterisation covariate effects assumed draw simple distribution correlation structure. parameterisations can modified using prior object.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_stancode.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Make stancode for the jsdm model — jsdm_stancode","text":"print(jsdmstan_model): printing function jsdmstan_model objects","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_stancode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make stancode for the jsdm model — jsdm_stancode","text":"","code":"jsdm_stancode(family = \"gaussian\", method = \"gllvm\") #> //Generated by jsdmstan #>  functions{ #>   #>   #> } #> data{ #>   int<lower=1> N; // Number of sites #>   int<lower=1> S; // Number of species #>   int<lower=1> D; // Number of latent dimensions  #>   int<lower=0> K; // Number of predictor variables #>   matrix[N, K] X; // Predictor matrix #>   real Y[N,S]; //Species matrix     #> } #> transformed data{ #>   #>   // Ensures identifiability of the model - no rotation of factors #>   int<lower=1> M; #>   M = D * (S - D) + choose(D, 2) + D; #>   #> } #> parameters{ #>    #>   //betas are hierarchical with covariance model #>   vector<lower=0>[K] sigmas_preds; #>   matrix[K, S] z_preds; #>   // covariance matrix on betas by predictors #>   corr_matrix[K] cor_preds;  #>   // Factor parameters #>   vector[M] L; // Non-zero factor loadings #>   real<lower=0> sigma_L; // variance of species loadings #>   // Latent variables #>   matrix[D, N] LV_uncor; // Per-site latent variable  #>   real<lower=0> sigma[S]; // Gaussian parameters  #> } #> transformed parameters{ #>   #>   // covariance matrix on betas by preds #>   matrix[K, S] betas; #>     #>   // Construct factor loading matrix #>   matrix[S, D] Lambda_uncor; #>   // Constraints to allow identifiability of loadings #>   for (i in 1:(D-1)) { #>     for (j in (i+1):(D)){ #>       Lambda_uncor[i,j] = 0; #>     } #>   } #>   { #>     int index; #>     index = 0; #>     for (j in 1:D) { #>       for (i in j:S) { #>         index = index + 1; #>         Lambda_uncor[i, j] = L[index]; #>       } #>     } #>   } #>     #>   betas = diag_pre_multiply(sigmas_preds, cor_preds) * z_preds; #>   #> } #> model{ #>   #>   matrix[N,S] mu; #>      #>   // model #>   matrix[N, S] LV_sum = ((Lambda_uncor * sigma_L) * LV_uncor)'; #>   mu = (X * betas) + LV_sum; #>      #>   #>     #>   // Species parameter priors #>   sigmas_preds ~  normal(0,1) ; #>   to_vector(z_preds) ~  normal(0,1) ; #>   // covariance matrix priors #>   cor_preds ~  lkj_corr(1) ; #>   #>   // Factor priors #>   to_vector(LV_uncor) ~  normal(0,1) ; #>   L ~  normal(0,1) ; #>   sigma_L ~  normal(0,1) ; // Variance of factor loadings #>   #>   //Standard deviation parameters #>   sigma ~  normal(0,1) ; #>   #>   #>   for(i in 1:N) Y[i,] ~  normal(mu[i,], sigma);  #>   #> } #> generated quantities{ #>   #>   // Calculate linear predictor, y_rep, log likelihoods for LOO #>   matrix[N, S] log_lik; #>     #>   // Sign correct factor loadings and factors #>   matrix[D, N] LV; #>   matrix[S, D] Lambda; #>   for(d in 1:D){ #>     if(Lambda_uncor[d,d] < 0){ #>       Lambda[,d] = -1 * Lambda_uncor[,d]; #>       LV[d,] = -1 * LV_uncor[d,]; #>     } else { #>       Lambda[,d] = Lambda_uncor[,d]; #>       LV[d,] = LV_uncor[d,]; #>     } #>   }  #>   { #>     matrix[N, S] linpred;   #>     linpred = (X * betas) + ((Lambda_uncor * sigma_L) * LV_uncor)' ; #>       #>       for(i in 1:N) { #>       for(j in 1:S) { log_lik[i, j] = normal_lpdf(Y[i, j] | linpred[i, j], sigma[j]);  #>       } #>     } #>   } #>     #> } #>  jsdm_stancode(family = \"poisson\", method = \"mglmm\") #> //Generated by jsdmstan #>  functions{ #>   #>   #> } #> data{ #>   int<lower=1> N; // Number of sites #>   int<lower=1> S; // Number of species #>    #>   int<lower=0> K; // Number of predictor variables #>   matrix[N, K] X; // Predictor matrix #>   int<lower=0> Y[N,S]; //Species matrix     #> } #> transformed data{ #>    #> } #> parameters{ #>    #>   //betas are hierarchical with covariance model #>   vector<lower=0>[K] sigmas_preds; #>   matrix[K, S] z_preds; #>   // covariance matrix on betas by predictors #>   corr_matrix[K] cor_preds;  #>   // species covariances #>   vector<lower=0>[S] sigmas_species; #>   matrix[S, N] z_species; #>   corr_matrix[S] cor_species;   #> } #> transformed parameters{ #>   #>   // covariance matrix on betas by preds #>   matrix[K, S] betas; #>     #>   matrix[N, S] u; #>   u = (diag_pre_multiply(sigmas_species, cor_species) * z_species)'; #>     #>   betas = diag_pre_multiply(sigmas_preds, cor_preds) * z_preds; #>   #> } #> model{ #>   #>   matrix[N,S] mu; #>      #>   // model #>   mu = (X * betas) + u; #>      #>   #>     #>   // Species parameter priors #>   sigmas_preds ~  normal(0,1) ; #>   to_vector(z_preds) ~  normal(0,1) ; #>   // covariance matrix priors #>   cor_preds ~  lkj_corr(1) ; #>   #>   // Species parameter priors #>   sigmas_species ~  normal(0,1) ; #>   to_vector(z_species) ~  normal(0,1) ; #>   cor_species ~  lkj_corr(1) ; #>    #>   #>   for(i in 1:N) Y[i,] ~  poisson_log(mu[i,]);  #>   #> } #> generated quantities{ #>   #>   // Calculate linear predictor, y_rep, log likelihoods for LOO #>   matrix[N, S] log_lik; #>      #>   { #>     matrix[N, S] linpred;   #>     linpred = (X * betas) + u ; #>       #>       for(i in 1:N) { #>       for(j in 1:S) { log_lik[i, j] = poisson_log_lpmf(Y[i, j] | linpred[i, j]);  #>       } #>     } #>   } #>     #> } #>"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_statsummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract summary statistics for a jsdmStanFit model — jsdm_statsummary","title":"Extract summary statistics for a jsdmStanFit model — jsdm_statsummary","text":"function extracts predicted Y values within models calculates summary statistics simulated community. default sum predicted scores site.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_statsummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract summary statistics for a jsdmStanFit model — jsdm_statsummary","text":"","code":"jsdm_statsummary(   object,   species = NULL,   sites = NULL,   summary_stat = \"sum\",   post_type = \"linpred\",   calc_over = \"site\",   simplify = TRUE,   draw_ids = NULL,   ndraws = NULL,   ... )"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_statsummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract summary statistics for a jsdmStanFit model — jsdm_statsummary","text":"object jsdmStanFit model object species species include summary statistic, default sites sites include summary statistic, default summary_stat summary statistic used, default sum function can used. post_type type posterior prediction used, either \"linpred\" posterior_linpred.jsdmStanFit() \"predict\" posterior_predict.jsdmStanFit() calc_over Whether calculate summary statistic site species, default species simplify Whether simplify output matrix, default TRUE draw_ids IDs draws used, numeric vector ndraws Number draws, default number samples posterior. sampled randomly chains fewer number samples. ... Arguments passed posterior prediction function","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_statsummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract summary statistics for a jsdmStanFit model — jsdm_statsummary","text":"simplify = TRUE matrix row draw column either site (calc_over = \"site\") species (calc_over = \"species\").","code":""},{"path":[]},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdm_statsummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract summary statistics for a jsdmStanFit model — jsdm_statsummary","text":"","code":"if (FALSE) { # \\dontrun{ # First simulate data and fit the jsdmStan model: gllvm_data <- gllvm_sim_data(   N = 100, S = 9, D = 2,   family = \"bernoulli\" ) gllvm_fit <- stan_gllvm(dat_list = gllvm_data, family = \"bernoulli\")  # The default is to return a matrix: jsdm_statsummary(gllvm_fit)  # The above returns the linear predictor, while we may want to get the posterior # prediction instead: jsdm_statsummary(gllvm_fit, post_type = \"predict\")  # This can be limited to a specific set of species and/or sites: jsdm_statsummary(gllvm_fit, species = 1:5, sites = seq(5, 95, 10)) } # }"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdmstan-extractors.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract quantities useful for model summaries — jsdmstan-extractors","title":"Extract quantities useful for model summaries — jsdmstan-extractors","text":"methdos extracting various useful summaries models, including model parameter names, NUTS parameters, log posterior, r-hat n-eff ratio.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdmstan-extractors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract quantities useful for model summaries — jsdmstan-extractors","text":"","code":"get_parnames(object, log_lik = FALSE)  # S3 method for class 'jsdmStanFit' nuts_params(object, ...)  # S3 method for class 'jsdmStanFit' log_posterior(object, ...)  # S3 method for class 'jsdmStanFit' rhat(object, ...)  # S3 method for class 'jsdmStanFit' neff_ratio(object, ...)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdmstan-extractors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract quantities useful for model summaries — jsdmstan-extractors","text":"object jsdmStanFit model object log_lik Whether log_lik parameters included parameter list ... Arguments passed bayesplot equivalent stanFit objects","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdmstan-extractors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract quantities useful for model summaries — jsdmstan-extractors","text":"get_parnames() returns character vector model parameter names.nuts_params() returns molten data frame (see reshape2::melt()). data frame columns \"Parameter\" (factor), \"Iteration\" (integer), \"Chain\" (integer), \"Value\" (numeric).log_posterior() returns molten data frame (see reshape2::melt()). data frame columns \"Chain\" (integer), \"Iteration\" (integer), \"Value\" (numeric).rhat(), neff_ratio() return named numeric vectors.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdmstan-extractors.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Extract quantities useful for model summaries — jsdmstan-extractors","text":"get_parnames(): Get model parameter names nuts_params(jsdmStanFit): Get NUTS parameters log_posterior(jsdmStanFit): Get log posterior rhat(jsdmStanFit): Get R-hat neff_ratio(jsdmStanFit): Get n_eff ratio","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdmstan-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'jsdmstan' package. — jsdmstan-package","title":"The 'jsdmstan' package. — jsdmstan-package","text":"package fitting joint species distribution models (jSDMs) Stan. package can used simulate fit data according multivariate generalised linear mixed model (MGLMM) generalised linear latent variable model (GLLVM). models fit using rstan package. Summary functions provided, interfaces bayesplot plotting functions","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/jsdmstan-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'jsdmstan' package. — jsdmstan-package","text":"Stan Development Team (NA). RStan: R interface Stan. R package version 2.26.1. https://mc-stan.org","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/loo.jsdmStanFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficient approximate leave-one-out cross-validation using the loo package — loo.jsdmStanFit","title":"Efficient approximate leave-one-out cross-validation using the loo package — loo.jsdmStanFit","text":"function uses loo package compute PSIS-LOO CV, efficient approximate leave-one-(LOO) cross-validation Bayesian models using Pareto smoothed importance sampling (PSIS). requires model fit using log_lik = TRUE.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/loo.jsdmStanFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficient approximate leave-one-out cross-validation using the loo package — loo.jsdmStanFit","text":"","code":"# S3 method for class 'jsdmStanFit' loo(x, ...)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/loo.jsdmStanFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficient approximate leave-one-out cross-validation using the loo package — loo.jsdmStanFit","text":"x jsdmStanFit model object ... arguments passed loo function","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/loo.jsdmStanFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficient approximate leave-one-out cross-validation using the loo package — loo.jsdmStanFit","text":"list class c(\"psis_loo\",\"loo\"), detailed loo documentation","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/mcmc_plot.jsdmStanFit.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC plots implemented in bayesplot — mcmc_plot.jsdmStanFit","title":"MCMC plots implemented in bayesplot — mcmc_plot.jsdmStanFit","text":"interface calling MCMC plotting functions implemented bayesplot package.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/mcmc_plot.jsdmStanFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC plots implemented in bayesplot — mcmc_plot.jsdmStanFit","text":"","code":"# S3 method for class 'jsdmStanFit' mcmc_plot(   x,   pars = NULL,   plotfun = \"intervals\",   sample_n = 10,   inc_warmup = FALSE,   include = TRUE,   regexp = FALSE,   ... )  mcmc_plot(x, ...)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/mcmc_plot.jsdmStanFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC plots implemented in bayesplot — mcmc_plot.jsdmStanFit","text":"x jsdmStanFit model object pars parameters plot, default random sample twenty parameters fit within model plotfun MCMC plot function bayesplot used sample_n pars = NULL number random non-sigma parameters include (details description) inc_warmup Whether include warmup period plots, default FALSE include Whether include exclude parameters specified pars, default TRUE (.e. include) regexp pars treated regular expression matching parnames, default FALSE ... arguments passed MCMC plotting function","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/mcmc_plot.jsdmStanFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC plots implemented in bayesplot — mcmc_plot.jsdmStanFit","text":"ggplot object can customised using ggplot2 package","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/mcmc_plot.jsdmStanFit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC plots implemented in bayesplot — mcmc_plot.jsdmStanFit","text":"acts interface plotting functions prefaced mcmc_ within bayesplot package. default plot interval plot parameters specified, full list available plot options run bayesplot::available_mcmc() error message set plotfun unrecognised plot function give list options. jSDM models lot parameters selecting subset recommended. pars set NULL (default) parameters either sigma kappa name plotted along random selection parameters (total number parameters set sample_n). see name parameters within model use get_parnames() - want plot parameters (hundreds reasonably sized model) set pars = get_parnames(x).","code":""},{"path":[]},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/mcmc_plot.jsdmStanFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC plots implemented in bayesplot — mcmc_plot.jsdmStanFit","text":"","code":"if (FALSE) { # \\dontrun{ # First simulate data and fit the model: gllvm_data <- jsdm_sim_data(   method = \"gllvm\", N = 100, S = 6, D = 2,   family = \"bernoulli\" ) gllvm_fit <- stan_jsdm(   dat_list = gllvm_data, method = \"gllvm\",   family = \"bernoulli\" )  # Default is to plot the intervals: mcmc_plot(gllvm_fit)  # Other plot types include options to see parameter recovery (if the # jsdm_sim_data functions are used the original parameters are saved within the # data list) mcmc_plot(gllvm_fit,   plotfun = \"recover_intervals\",   pars = c(\"LV[2,20]\", \"sigmas_preds[1]\", \"sigma_L\"),   true = c(     gllvm_data$pars$LV[2, 20],     gllvm_data$pars$beta_sds,     gllvm_data$pars$L_sigma   ) ) } # }"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/multi_pp_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple pp_check plots per species — multi_pp_check","title":"Multiple pp_check plots per species — multi_pp_check","text":"Multiple pp_check plots per species","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/multi_pp_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple pp_check plots per species — multi_pp_check","text":"","code":"multi_pp_check(   object,   plotfun = \"dens_overlay\",   species = NULL,   ndraws = NULL,   grid_args = list(...),   ... )"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/multi_pp_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple pp_check plots per species — multi_pp_check","text":"object jsdmStanFit model object plotfun ppc plot function use, given character string. default call ppc_dens_overlay. Can specified either entire name function character string without ppc_ prefix. species species included, default ndraws many draws used within plots grid_args Optional list arguments passed gridExtra::arrangeGrob() (nrow, ncol, widths, etc.) ... options passed pp_check","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/multi_pp_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple pp_check plots per species — multi_pp_check","text":"object class \"bayesplot_grid\", information see bayesplot::bayesplot_grid()","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/ordiplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting an ordination plot for a GLLVM model — ordiplot","title":"Plotting an ordination plot for a GLLVM model — ordiplot","text":"function takes GLLVM model fit plots ordination plot random (specified) selection draws","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/ordiplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting an ordination plot for a GLLVM model — ordiplot","text":"","code":"ordiplot(   object,   choices = c(1, 2),   type = \"species\",   summary_stat = \"median\",   ndraws = 0,   draw_ids = NULL,   size = c(2, 1),   alpha = c(1, 0.5),   shape = c(18, 16),   geom = \"point\",   errorbar_range = 0.75,   errorbar_linewidth = 1 )"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/ordiplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting an ordination plot for a GLLVM model — ordiplot","text":"object jsdmStanFit model object choices latent variables plot dimensions, default c(1,2) type Whether plot sites species, default \"species\". summary_stat summary statistic used plot overall averages posterior sample. default \"median\", NULL result summary included ndraws many individual draws include plot, default 0. Setting 0 result individual draws included draw_ids draws include plot (overrides ndraws) size size points graph, specified two-element vector first used summary points second individual draws, default c(2,1) alpha transparency/alpha points graph, specified two-element vector first used summary points second individual draws, default c(1,0.5) shape shape points graph, specified two-element vector first used summary points second individual draws, default c(18,16) geom geom ggplot2 used summary statistic default \"point\", alternatively can \"text\" errorbar_range specified, central range data covered errorbar. Needs given either NULL (.e. errorbar), number 0 1, default 0.75. errorbar_linewidth linewidth error bar, default 1.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/ordiplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting an ordination plot for a GLLVM model — ordiplot","text":"ggplot object can customised using ggplot2 package","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/ordiplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting an ordination plot for a GLLVM model — ordiplot","text":"","code":"if (FALSE) { # \\dontrun{ # First simulate data and fit the model: gllvm_data <- jsdm_sim_data(   method = \"gllvm\", N = 100, S = 6, D = 3,   family = \"bernoulli\" ) gllvm_fit <- stan_jsdm(   dat_list = gllvm_data, method = \"gllvm\",   family = \"bernoulli\" )  ordiplot(gllvm_fit) # now plot the 1st and 3rd latent variables against each other for the sites: ordiplot(gllvm_fit, choices = c(1, 3), type = \"sites\") } # }"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pinewood.html","id":null,"dir":"Reference","previous_headings":"","what":"Vegetation data from native pinewoods in Scotland, 1971 — pinewood","title":"Vegetation data from native pinewoods in Scotland, 1971 — pinewood","text":"tree data series plots across native Scots Pine woodlands Scotland surveyed 1971. contains 16 tree species measured 265 plots. information data see Wood Bunce (2016).","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pinewood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vegetation data from native pinewoods in Scotland, 1971 — pinewood","text":"","code":"pinewood"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pinewood.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vegetation data from native pinewoods in Scotland, 1971 — pinewood","text":"data frame 265 rows 16 columns. column species, species aggregates row plot. plot identity marked rownames data frame. Every entry given number individuals species observed within plot.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pinewood.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Vegetation data from native pinewoods in Scotland, 1971 — pinewood","text":"https://doi.org/10.5285/56a48373-771c-4d4a-8b5a-45ef496c6e55","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pinewood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vegetation data from native pinewoods in Scotland, 1971 — pinewood","text":"data made available terms Open Government Licence.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pinewood.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vegetation data from native pinewoods in Scotland, 1971 — pinewood","text":"Wood, C. M., & Bunce, R. G. H. (2016). Ecological survey native pinewoods Scotland 1971. Earth System Science Data, 8(1), 177-189. https://doi.org/10.5194/essd-8-177-2016","code":""},{"path":[]},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pinewood_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Environmental data from native pinewoods in Scotland, 1971 — pinewood_env","title":"Environmental data from native pinewoods in Scotland, 1971 — pinewood_env","text":"environmental data series plots across native Scots Pine woodlands Scotland surveyed 1971. contains approximate location site, soil pH plot plus average annual rainfall, maximum summer temperature minimum winter temperature 1941-1970. climate variables calculated based upon HadUK-Grid climate data (Met Office et al., 2022). information sites see Wood Bunce (2016).  dataset limited 265 plots across 25 sites soil pH measurements.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pinewood_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environmental data from native pinewoods in Scotland, 1971 — pinewood_env","text":"","code":"pinewood_env"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pinewood_env.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Environmental data from native pinewoods in Scotland, 1971 — pinewood_env","text":"data frame 265 rows 10 columns. Site_no site identifier (25 total) Plot_no plot identifier per site SitePlot unique plot identifier OSGR 1 km grid reference site (OSGB) Easting Easting site (centre position 1km square, British National Grid) Northing Northing site (centre position 1km square, British National Grid) rainfall average annual rainfall mm tasmax_summer average maximum temperature summer deg Celsius tasmin_winter average minimum temperature winter deg Celsius Soil_PH soil pH top 10cm soil","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pinewood_env.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Environmental data from native pinewoods in Scotland, 1971 — pinewood_env","text":"https://doi.org/10.5285/56a48373-771c-4d4a-8b5a-45ef496c6e55","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pinewood_env.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Environmental data from native pinewoods in Scotland, 1971 — pinewood_env","text":"data made available terms Open Government Licence.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pinewood_env.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Environmental data from native pinewoods in Scotland, 1971 — pinewood_env","text":"Wood, C. M., & Bunce, R. G. H. (2016). Ecological survey native pinewoods Scotland 1971. Earth System Science Data, 8(1), 177-189. https://doi.org/10.5194/essd-8-177-2016Met Office; Hollis, D.; McCarthy, M.; Kendon, M.; Legg, T. (2022): HadUK-Grid Gridded Climate Observations 1km grid UK, v1.1.0.0 (1836-2021). NERC EDS Centre Environmental Data Analysis, 26 May 2022. http://dx.doi.org/10.5285/bbca3267dc7d4219af484976734c9527","code":""},{"path":[]},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/plot.jsdmStanFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the traceplots and density plots for parameters within a jsdmStanFit object — plot.jsdmStanFit","title":"Plot the traceplots and density plots for parameters within a jsdmStanFit object — plot.jsdmStanFit","text":"function takes parameters jsdmStanfit object plots using bayesplot::mcmc_combo()function bayesplot package.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/plot.jsdmStanFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the traceplots and density plots for parameters within a jsdmStanFit object — plot.jsdmStanFit","text":"","code":"# S3 method for class 'jsdmStanFit' plot(   x,   pars = NULL,   combo = c(\"dens\", \"trace\"),   N = 5L,   ask = TRUE,   inc_warmup = FALSE,   include = TRUE,   sample_n = 10,   regexp = FALSE,   plot = TRUE,   newpage = TRUE,   ... )"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/plot.jsdmStanFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the traceplots and density plots for parameters within a jsdmStanFit object — plot.jsdmStanFit","text":"x jsdmStanFit model object pars parameters plot, default random sample twenty parameters fit within model combo combination plot types within bayesplot::mcmc_combo() use, default c(\"dens\", \"trace\") N number plots per page, default 5 ask Whether ask plotting new page, default TRUE inc_warmup Whether include warmup period plots, default FALSE include Whether include exclude parameters specified pars, default TRUE (.e. include) sample_n pars = NULL number random non-sigma parameters include (details description) regexp pars treated regular expression matching parnames, default FALSE plot Whether plot plots, default TRUE newpage Whether first plot plotted new page, default TRUE ... Arguments passed bayesplot::mcmc_combo()","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/plot.jsdmStanFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the traceplots and density plots for parameters within a jsdmStanFit object — plot.jsdmStanFit","text":"invisible list plots#","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/plot.jsdmStanFit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the traceplots and density plots for parameters within a jsdmStanFit object — plot.jsdmStanFit","text":"acts interface bayesplot::mcmc_combo() function, default plot density plot trace plot parameter specified, although can changed setting combo argument. jSDM models lot parameters selecting subset recommended. pars set NULL (default) parameters either sigma kappa name plotted along random selection parameters (total number parameters set sample_n). see name parameters within model use get_parnames() - want plot parameters (hundreds reasonably sized model) set pars = get_parnames(x).","code":""},{"path":[]},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/plot.jsdmStanFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the traceplots and density plots for parameters within a jsdmStanFit object — plot.jsdmStanFit","text":"","code":"if (FALSE) { # \\dontrun{ # First simulate data and get model fit: mglmm_data <- mglmm_sim_data(   N = 100, S = 10, K = 3,   family = \"gaussian\" ) mglmm_fit <- stan_mglmm(   Y = mglmm_data$Y, X = mglmm_data$X,   family = \"gaussian\" )  # The default plot: plot(mglmm_fit)  # Plotting specifically the cor_species parameters: plot(mglmm_fit, pars = \"cor_species\", regexp = TRUE)  # Increasing the number of randomly sampled parameters to plot: plot(mglmm_fit, sample_n = 20) } # }"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/posterior_linpred.jsdmStanFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Access the posterior distribution of the linear predictor — posterior_linpred.jsdmStanFit","title":"Access the posterior distribution of the linear predictor — posterior_linpred.jsdmStanFit","text":"Extract posterior draws linear predictor, possibly transformed inverse-link function.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/posterior_linpred.jsdmStanFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access the posterior distribution of the linear predictor — posterior_linpred.jsdmStanFit","text":"","code":"# S3 method for class 'jsdmStanFit' posterior_linpred(   object,   transform = FALSE,   newdata = NULL,   ndraws = NULL,   draw_ids = NULL,   list_index = \"draws\",   ... )"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/posterior_linpred.jsdmStanFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access the posterior distribution of the linear predictor — posterior_linpred.jsdmStanFit","text":"object model object transform linear predictor transformed using inverse-link function. default FALSE, case untransformed linear predictor returned. newdata New data, default NULL uses original data ndraws Number draws, default number samples posterior. sampled randomly chains fewer number samples. draw_ids IDs draws used, numeric vector list_index Whether return output list indexed number draws (default), species, site. ... Currently unused","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/posterior_linpred.jsdmStanFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access the posterior distribution of the linear predictor — posterior_linpred.jsdmStanFit","text":"list linear predictors. list_index \"draws\" (default) list length equal number draws element list site x species matrix. list_index \"species\" list length equal number species element list draws x sites matrix. list_index \"sites\" list length equal number sites element list draws x species matrix. Note zero-inflated case linear predictor non-zero-inflated part model.","code":""},{"path":[]},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/posterior_predict.jsdmStanFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw from the posterior predictive distribution — posterior_predict.jsdmStanFit","title":"Draw from the posterior predictive distribution — posterior_predict.jsdmStanFit","text":"Draw posterior predictive distribution outcome.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/posterior_predict.jsdmStanFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw from the posterior predictive distribution — posterior_predict.jsdmStanFit","text":"","code":"# S3 method for class 'jsdmStanFit' posterior_predict(   object,   newdata = NULL,   ndraws = NULL,   draw_ids = NULL,   list_index = \"draws\",   Ntrials = NULL,   include_zi = TRUE,   ... )"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/posterior_predict.jsdmStanFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw from the posterior predictive distribution — posterior_predict.jsdmStanFit","text":"object model object newdata New data, default NULL uses original data ndraws Number draws, default number samples posterior. sampled randomly chains fewer number samples. draw_ids IDs draws used, numeric vector list_index Whether return output list indexed number draws (default), species, site. Ntrials binomial distribution number trials, given either single integer assumed constant across sites site-length vector integers. include_zi zero-inflated poisson distribution, whether include zero-inflation prediction. Defaults TRUE. ... Currently unused","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/posterior_predict.jsdmStanFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw from the posterior predictive distribution — posterior_predict.jsdmStanFit","text":"list linear predictors. list_index \"draws\" (default) list length equal number draws element list site x species matrix. list_index \"species\" list length equal number species element list draws x sites matrix. list_index \"sites\" list length equal number sites element list draws x species matrix.","code":""},{"path":[]},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/posterior_zipred.html","id":null,"dir":"Reference","previous_headings":"","what":"Access the posterior distribution of the linear predictor for zero-inflation parameter — posterior_zipred","title":"Access the posterior distribution of the linear predictor for zero-inflation parameter — posterior_zipred","text":"Extract posterior draws linear predictor zero-inflation parameter, possibly transformed inverse-link function.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/posterior_zipred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access the posterior distribution of the linear predictor for zero-inflation parameter — posterior_zipred","text":"","code":"posterior_zipred(   object,   transform = FALSE,   newdata = NULL,   ndraws = NULL,   draw_ids = NULL,   list_index = \"draws\" )"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/posterior_zipred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access the posterior distribution of the linear predictor for zero-inflation parameter — posterior_zipred","text":"object model object transform linear predictor transformed using inverse-link function. default FALSE, case untransformed linear predictor returned. newdata New data, default NULL uses original data ndraws Number draws, default number samples posterior. sampled randomly chains fewer number samples. draw_ids IDs draws used, numeric vector list_index Whether return output list indexed number draws (default), species, site.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/posterior_zipred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access the posterior distribution of the linear predictor for zero-inflation parameter — posterior_zipred","text":"list linear predictors. list_index \"draws\" (default) list length equal number draws element list site x species matrix. list_index \"species\" list length equal number species element list draws x sites matrix. list_index \"sites\" list length equal number sites element list draws x species matrix. Note zero-inflated case linear predictor non-zero-inflated part model.","code":""},{"path":[]},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pp_check.jsdmStanFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior predictive checks for jsdmStanFit objects — pp_check.jsdmStanFit","title":"Posterior predictive checks for jsdmStanFit objects — pp_check.jsdmStanFit","text":"function acts interface bayesplot::pp_check(), default calculating summary statistics site (.e. row response matrix) plotted compared data used fit model.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pp_check.jsdmStanFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior predictive checks for jsdmStanFit objects — pp_check.jsdmStanFit","text":"","code":"# S3 method for class 'jsdmStanFit' pp_check(   object,   plotfun = \"dens_overlay\",   species = NULL,   sites = NULL,   summary_stat = \"sum\",   calc_over = \"site\",   ndraws = NULL,   ... )"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pp_check.jsdmStanFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior predictive checks for jsdmStanFit objects — pp_check.jsdmStanFit","text":"object object class jsdmStanFit plotfun ppc plot function use, given character string. default call ppc_dens_overlay. Can specified either entire name function character string without ppc_ prefix. plotfun == \"pairs\" pairs plot produced diagonal density plots selected species, upper triangle showing recovery correlation selected species, lower triangle showing plotted relationships species data one draw posterior prediction. species species include summary statistic, default sites sites include summary statistic, default summary_stat summary statistic used, default sum function can used. calc_over Whether calculate summary statistic site species, default species ndraws Number draws, default number samples posterior. sampled randomly chains fewer number samples. ... Additional arguments passed jsdm_statsummary().","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pp_check.jsdmStanFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior predictive checks for jsdmStanFit objects — pp_check.jsdmStanFit","text":"ggplot object can customised using ggplot2 package.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pp_check.jsdmStanFit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior predictive checks for jsdmStanFit objects — pp_check.jsdmStanFit","text":"function takes jsdmStanFit object tries extract statistics can give useful summaries within posterior prediction (retrodiction) using bayesplot::pp_check() function. uses jsdm_statsummary() function get summary statistics supplies specified ppc_ function bayesplot package. full list available plotting functions call bayesplot::available_ppc().","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/pp_check.jsdmStanFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior predictive checks for jsdmStanFit objects — pp_check.jsdmStanFit","text":"","code":"if (FALSE) { # \\dontrun{ # First simulate data and fit the jsdmStan model: mglmm_data <- mglmm_sim_data(   N = 100, S = 10, K = 3,   family = \"gaussian\" ) mglmm_fit <- stan_mglmm(   Y = mglmm_data$Y, X = mglmm_data$X,   family = \"gaussian\" )  # The default is to plot a density overlay: pp_check(mglmm_fit)  # Other plot functions can be called, such as a ribbon plot: pp_check(mglmm_fit, plotfun = \"ribbon\")  # Instead of calculating the sum over sites other statistics can be calculated, # e.g. the mean of each species: pp_check(mglmm_fit,   plotfun = \"ecdf_overlay\", summary_stat = \"mean\",   calc_over = \"species\", ndraws = 20 )  # A pairs plot - limiting to only a subset of species for graphical simplicity pp_check(mglmm_fit, plotfun = \"pairs\", species = 1:4) } # }"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/print.jsdmStanFamily.html","id":null,"dir":"Reference","previous_headings":"","what":"Print jsdmStanFamily object — print.jsdmStanFamily","title":"Print jsdmStanFamily object — print.jsdmStanFamily","text":"Print jsdmStanFamily object","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/print.jsdmStanFamily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print jsdmStanFamily object — print.jsdmStanFamily","text":"","code":"# S3 method for class 'jsdmStanFamily' print(x, ...)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/print.jsdmStanFamily.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print jsdmStanFamily object — print.jsdmStanFamily","text":"x jsdmStanFamily object ... arguments, used stage.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/print.jsdmStanFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the default summary for the model — print.jsdmStanFit","title":"Print the default summary for the model — print.jsdmStanFit","text":"prints summary models includes type model fit, number species, sites predictors well summary parameters Rhat > 1.01 effective sample size total number samples ratio < 0.05","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/print.jsdmStanFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the default summary for the model — print.jsdmStanFit","text":"","code":"# S3 method for class 'jsdmStanFit' print(x, ...)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/print.jsdmStanFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the default summary for the model — print.jsdmStanFit","text":"x jsdmStanFit model object ... arguments passed summary.jsdmStanFit","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/sim_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for simulating data — sim_helpers","title":"Helper functions for simulating data — sim_helpers","text":"rlkj function generating random LKJ correlation matrices rgampois function generates random draws Stan's alternative parameterisation negative binomial distribution.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/sim_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for simulating data — sim_helpers","text":"","code":"rgampois(n, mu, scale)  rlkj(n, eta = 1, cholesky = FALSE)  rinvgamma(n, shape, scale)  rstudentt(n, df, mu, sigma)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/sim_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for simulating data — sim_helpers","text":"n number samples create/dimension correlation matrix mu mean used within negative binomial parameterisation Student T distribution scale phi parameter controls overdispersion negative binomial distribution (see details description), scale parameter used within inverse gamma distribution (see stats::rgamma()) eta shape parameter LKJ distribution cholesky Whether correlation matrix returned Cholesky decomposition, default FALSE shape shape parameter inverse gamma distribution (see stats::rgamma()) df degrees freedom parameter within Student T distribution (see details) sigma scale Student T distribution (see details)","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/sim_helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper functions for simulating data — sim_helpers","text":"Lewandowski-Kurowicka-Joe (LKJ) distribution prior distribution correlation matrices, shape parameter eta. eta 1 density uniform correlation matrix, ith eta > 1 probability concentrates around identity matrix 0 < eta < 1 probability concentrates away identity matrix. alternative parameterisation negative binomial distribution : $$NegBinomial2(y | mu, scale) = binom(y+scale-1,y) (mu/mu+scale)^y (scale/mu + scale)^scale$$ mean distribution mu variance \\(mu + (mu^2/scale)\\) rlkj function sourced Ben Goodrich's response Stan google mailing list. (see link https://groups.google.com/g/stan-users/c/3gDvAs_qwN8/m/Xpgi2rPlx68J)). rgampois function sourced rethinking package Richard McElreath. alternative parameterisation Student T distribution mean (mu) scale (sigma) consistent Stan parameterisation rather parameterisation stats::rt().","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_gllvm.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for stan_jsdm with method = ","title":"Alias for stan_jsdm with method = ","text":"Alias stan_jsdm method = \"gllvm\"","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_gllvm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for stan_jsdm with method = ","text":"","code":"stan_gllvm(X, ...)  # Default S3 method stan_gllvm(   X = NULL,   Y = NULL,   D = NULL,   species_intercept = TRUE,   dat_list = NULL,   family,   site_intercept = \"none\",   prior = jsdm_prior(),   save_data = TRUE,   iter = 4000,   ... )  # S3 method for class 'formula' stan_gllvm(formula, data = list(), ...)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_gllvm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for stan_jsdm with method = ","text":"X covariates matrix, rows site columns covariates. Ignored favour data formula approach used specify model. ... Arguments passed rstan::sampling() Y Matrix species sites. Rows assumed sites, columns assumed species D number latent variables within GLLVM model species_intercept Whether model fit intercept species, default TRUE dat_list Alternatively, data can given model list containing Y, X, N, S, K, site_intercept. See output jsdm_sim_data() example can formatted. family response family, must one \"gaussian\", \"neg_binomial\", \"poisson\", \"binomial\", \"bernoulli\", \"zi_poisson\". Regular expression matching supported. site_intercept Whether site intercept included, potential values \"none\" (site intercept), \"grouped\" (site intercept hierarchical grouping) \"ungrouped\" (site intercept grouping) prior Set prior specifications call jsdm_prior() save_data data used fit model saved model object, default TRUE. iter positive integer specifying number iterations chain, default 4000. formula formula covariates species means modelled data Dataframe list covariates.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_gllvm.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Alias for stan_jsdm with method = ","text":"stan_gllvm(default): Default stan_gllvm(formula): Formula interface","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_jsdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit jsdm models in Stan — stan_jsdm","title":"Fit jsdm models in Stan — stan_jsdm","text":"function fits joint Species Distribution models Stan, using either generalised linear latent variable model approach (method = \"gllvm\"), multivariate generalised linear mixed model approach (method = \"mglmm\").","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_jsdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit jsdm models in Stan — stan_jsdm","text":"","code":"stan_jsdm(X, ...)  # Default S3 method stan_jsdm(   X = NULL,   Y = NULL,   species_intercept = TRUE,   method,   dat_list = NULL,   family,   site_intercept = \"none\",   D = NULL,   prior = jsdm_prior(),   site_groups = NULL,   beta_param = \"unstruct\",   Ntrials = NULL,   zi_param = \"constant\",   zi_X = NULL,   save_data = TRUE,   iter = 4000,   log_lik = TRUE,   ... )  # S3 method for class 'formula' stan_jsdm(formula, data = list(), ...)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_jsdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit jsdm models in Stan — stan_jsdm","text":"X covariates matrix, rows site columns covariates. Ignored favour data formula approach used specify model. ... Arguments passed rstan::sampling() Y Matrix species sites. Rows assumed sites, columns assumed species species_intercept Whether model fit intercept species, default TRUE method Whether fit GLLVM MGLMM model, details description dat_list Alternatively, data can given model list containing Y, X, N, S, K, site_intercept. See output jsdm_sim_data() example can formatted. family response family, must one \"gaussian\", \"neg_binomial\", \"poisson\", \"binomial\", \"bernoulli\", \"zi_poisson\". Regular expression matching supported. site_intercept Whether site intercept included, potential values \"none\" (site intercept), \"grouped\" (site intercept hierarchical grouping) \"ungrouped\" (site intercept grouping) D number latent variables within GLLVM model prior Set prior specifications call jsdm_prior() site_groups site intercept grouped, vector group identities per site beta_param parameterisation environmental covariate effects, default \"unstruct\". See details information. Ntrials binomial distribution number trials, given either single integer assumed constant across sites site-length vector integers. zi_param zero-inflated families, whether zero-inflation parameter species-specific constant (default, \"constant\"), varies environmental covariates (\"covariate\"). zi_X zi = \"covariate\", matrix environmental predictors zero-inflation modelled response . already intercept column (identified values equal one), one added front matrix. save_data data used fit model saved model object, default TRUE. iter positive integer specifying number iterations chain, default 4000. log_lik Whether log likelihood calculated generated quantities (default TRUE), required loo formula formula covariates species means modelled data Dataframe list covariates.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_jsdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit jsdm models in Stan — stan_jsdm","text":"jsdmStanFit object, comprising list including StanFit object, data used fit model plus bits information. See jsdmStanFit details.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_jsdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit jsdm models in Stan — stan_jsdm","text":"Environmental covariate effects (\"betas\") can parameterised two ways. \"cor\" parameterisation covariate effects assumed constrained correlation matrix covariates. \"unstruct\" parameterisation covariate effects assumed draw simple distribution correlation structure. parameterisations can modified using prior object. Families supported Gaussian family, negative binomial family, Poisson family, binomial family (number trials specificied using Ntrials parameter), Bernoulli family (special case binomial family number trials equal one), zero-inflated Poisson zero-inflated negative binomial. zero-inflated families zero-inflation assumed species-specific constant.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_jsdm.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Fit jsdm models in Stan — stan_jsdm","text":"stan_jsdm(default): default way things stan_jsdm(formula): Formula interface","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_jsdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit jsdm models in Stan — stan_jsdm","text":"","code":"if (FALSE) { # \\dontrun{ # MGLMM - specified by using the mglmm aliases and with direct reference to Y and # X matrices: mglmm_data <- mglmm_sim_data(   N = 100, S = 10, K = 3,   family = \"gaussian\" ) mglmm_fit <- stan_mglmm(   Y = mglmm_data$Y, X = mglmm_data$X,   family = \"gaussian\" ) mglmm_fit  # You can also run a model by supplying the data as a list: gllvm_data <- jsdm_sim_data(   method = \"gllvm\", N = 100, S = 6, D = 2,   family = \"bernoulli\" ) gllvm_fit <- stan_jsdm(   dat_list = gllvm_data, method = \"gllvm\",   family = \"bernoulli\" ) gllvm_fit } # }"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_mglmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Alias for stan_jsdm with method = ","title":"Alias for stan_jsdm with method = ","text":"Alias stan_jsdm method = \"mglmm\"","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_mglmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alias for stan_jsdm with method = ","text":"","code":"stan_mglmm(X, ...)  # Default S3 method stan_mglmm(   X = NULL,   Y = NULL,   species_intercept = TRUE,   dat_list = NULL,   family,   site_intercept = \"none\",   prior = jsdm_prior(),   save_data = TRUE,   iter = 4000,   ... )  # S3 method for class 'formula' stan_mglmm(formula, data = list(), ...)"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_mglmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alias for stan_jsdm with method = ","text":"X covariates matrix, rows site columns covariates. Ignored favour data formula approach used specify model. ... Arguments passed rstan::sampling() Y Matrix species sites. Rows assumed sites, columns assumed species species_intercept Whether model fit intercept species, default TRUE dat_list Alternatively, data can given model list containing Y, X, N, S, K, site_intercept. See output jsdm_sim_data() example can formatted. family response family, must one \"gaussian\", \"neg_binomial\", \"poisson\", \"binomial\", \"bernoulli\", \"zi_poisson\". Regular expression matching supported. site_intercept Whether site intercept included, potential values \"none\" (site intercept), \"grouped\" (site intercept hierarchical grouping) \"ungrouped\" (site intercept grouping) prior Set prior specifications call jsdm_prior() save_data data used fit model saved model object, default TRUE. iter positive integer specifying number iterations chain, default 4000. formula formula covariates species means modelled data Dataframe list covariates.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/stan_mglmm.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Alias for stan_jsdm with method = ","text":"stan_mglmm(default): Default stan_mglmm(formula): Formula interface","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/summary.jsdmStanFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise the model fit and data structure and give summaries for the parameters — summary.jsdmStanFit","title":"Summarise the model fit and data structure and give summaries for the parameters — summary.jsdmStanFit","text":"returns matrix parameter summaries including summary parameter estimates, R-hat, bulk ESS tail ESS. can limited parameters Rhat > 1.01 ESS < 500 setting prob_pars_only = TRUE.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/summary.jsdmStanFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise the model fit and data structure and give summaries for the parameters — summary.jsdmStanFit","text":"","code":"# S3 method for class 'jsdmStanFit' summary(   object,   prob_quantiles = c(0.15, 0.85),   digit_summary = 3,   prob_pars_only = FALSE,   pars = NULL,   na_filter = TRUE,   log_lik = FALSE,   ... )"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/summary.jsdmStanFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise the model fit and data structure and give summaries for the parameters — summary.jsdmStanFit","text":"object model object prob_quantiles quantiles summarise parameter estimates , default 15% 85% quantiles digit_summary number digits round results prob_pars_only Whether limit output parameters Rhat > 1.01 effective sample size < 500, default FALSE pars Parameters compute summary , default NULL .e. parameters included na_filter Whether remove parameters NAs Rhat - includes parameters fixed zero one, upper triangle cholesky factor correlation matrix. default TRUE log_lik Whether log_lik parameters included, default FALSE ... Arguments passed extract()","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/summary.jsdmStanFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise the model fit and data structure and give summaries for the parameters — summary.jsdmStanFit","text":"","code":"if (FALSE) { # \\dontrun{  gllvm_data <- jsdm_sim_data(   method = \"gllvm\", N = 100, S = 6, D = 2,   family = \"bernoulli\" ) gllvm_fit <- stan_jsdm(   dat_list = gllvm_data, method = \"gllvm\",   family = \"bernoulli\" ) gllvm_summ <- summary(gllvm_fit) head(gllvm_summ, 20)  summary(gllvm_fit, prob_quantiles = c(0.05, 0.5, 0.95)) } # }"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/update.jsdmStanFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a jsdmStanFit model object with new data or Stan arguments — update.jsdmStanFit","title":"Update a jsdmStanFit model object with new data or Stan arguments — update.jsdmStanFit","text":"function allows update jsdmStanFit model new data new arguments Stan. support changes require recompiling stancode - use stan_jsdm(). Changes number sites, species covariates require recompiling stancode can therefore done using function.","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/update.jsdmStanFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a jsdmStanFit model object with new data or Stan arguments — update.jsdmStanFit","text":"","code":"# S3 method for class 'jsdmStanFit' update(   object,   newY = NULL,   newX = NULL,   newD = NULL,   newNtrials = NULL,   newZi_X = NULL,   save_data = TRUE,   ... )"},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/update.jsdmStanFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a jsdmStanFit model object with new data or Stan arguments — update.jsdmStanFit","text":"object jsdmStanFit model object newY New Y data, default NULL newX New X data, default NULL newD New number latent variables, default NULL newNtrials New number trials (binomial model ), default NULL newZi_X New predictor data zi parameter zero-inflated models, default NULL. cases model originally fit X zi_X data newX supplied update.jsdmStanFit zi_X data also set newX. save_data Whether save data jsdmStanFit object, default TRUE ... Arguments passed rstan::sampling()","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/update.jsdmStanFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a jsdmStanFit model object with new data or Stan arguments — update.jsdmStanFit","text":"object class jsdmStanFit","code":""},{"path":"https://nerc-ceh.github.io/jsdmstan/reference/update.jsdmStanFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a jsdmStanFit model object with new data or Stan arguments — update.jsdmStanFit","text":"","code":"if (FALSE) { # \\dontrun{ # MGLMM - specified by using the mglmm aliases and with direct reference to Y and # X matrices: mglmm_data <- mglmm_sim_data(   N = 100, S = 10, K = 3,   family = \"gaussian\" ) mglmm_fit <- stan_mglmm(   Y = mglmm_data$Y, X = mglmm_data$X,   family = \"gaussian\" ) mglmm_fit2 <- update(mglmm_fit, iter = 4000)  # You can also run a model by supplying the data as a list: gllvm_data <- jsdm_sim_data(   method = \"gllvm\", N = 100, S = 6, D = 2,   family = \"bernoulli\" ) gllvm_fit <- stan_jsdm(   dat_list = gllvm_data, method = \"gllvm\",   family = \"bernoulli\" ) gllvm_fit gllvm_data <- jsdm_sim_data(   method = \"gllvm\", N = 500, S = 4, D = 2,   family = \"bernoulli\" ) gllvm_fit2 <- update(gllvm_fit, newY = gllvm_data$Y) gllvm_fit2 } # }"}]
